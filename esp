local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local UserInputService = game:GetService('UserInputService')
local CoreGui = game:GetService('CoreGui')
local TextService = game:GetService('TextService')
local TweenService = game:GetService("TweenService")

-- Общие настройки
local localPlayer = Players.LocalPlayer
local plot = Workspace.Plots

-- Конфигурация BRAINROT ESP
local CONFIG = {
    MAX_DISTANCE = 500,
    AUTO_COLOR = true,
    MIN_BRIGHTNESS = 0.7,
    TEXT_STROKE_COLOR = Color3.fromRGB(0, 0, 0),
    TEXT_STROKE_TRANSPARENCY = 0,
    FONT = Enum.Font.TitilliumWeb,
    UPDATE_INTERVAL = 2,
    TEXT_OFFSET_NEAR = 12.0,
    TEXT_OFFSET_FAR = 17.0,
    TEXT_SIZE_NEAR = 36,
    TEXT_SIZE_FAR = 24,
    VALUE_THRESHOLD = 1.1,
    FONT_WEIGHT = Enum.FontWeight.Bold,
    SMOOTHING_FACTOR = 0.2,
}

-- Конфигурация NAMETAGS
local NAMETAG_SETTINGS = {
    Enabled = true,
    ActiveNameTags = {},
    Connections = {}
}

-- Конфигурация TIMERESP
local TIMERESP_SETTINGS = {
    Enabled = true,
    ActiveTimers = {},
}

-- Конфигурация WALLHACK
local WALLHACK_SETTINGS = {
    FillColor = Color3.fromRGB(0, 170, 255),
    FillTransparency = 0.22,
    OutlineColor = Color3.fromRGB(0, 170, 255),
    OutlineTransparency = 0.08,
    Enabled = true
}

-- Глобальные переменные
local currentBillboard = nil
local brainrotConnections = {}
local lastBestValue = 0
local lastBestSpawn = nil
local brainrotEnabled = true
local controlGUI = nil
local currentColor = Color3.fromRGB(255, 255, 150)
local currentTextSize = CONFIG.TEXT_SIZE_NEAR
local currentTextOffset = CONFIG.TEXT_OFFSET_NEAR
local wallHighlights = {}
local timerEspConnections = {}

-- BRAINROT ESP функции
local function generateLightColor()
    local function getLightComponent()
        return math.random(160, 255) / 255
    end

    local r, g, b = getLightComponent(), getLightComponent(), getLightComponent()
    local brightness = (r + g + b) / 3

    if brightness < CONFIG.MIN_BRIGHTNESS then
        if r < g and r < b then
            r = CONFIG.MIN_BRIGHTNESS
        elseif g < b then
            g = CONFIG.MIN_BRIGHTNESS
        else
            b = CONFIG.MIN_BRIGHTNESS
        end
    end

    return Color3.new(r, g, b)
end

local function formatSalaryText(value)
    if not value then
        return '0/S'
    end
    value = tonumber(value) or 0

    if value >= 1000000 then
        return string.format('%.1fM/s', value / 1000000)
    elseif value >= 1000 then
        return string.format('%.1fK/s', value / 1000)
    else
        return string.format('%d/s', math.floor(value))
    end
end

local function parseSalaryValue(text)
    if not text then
        return 0
    end
    text = text:upper():gsub('%s+', ''):gsub(',', '')
    local numberPart = text:gsub('[^%d%.]', '')
    local number = tonumber(numberPart) or 0

    if text:find('M/S') then
        return number * 1000000
    elseif text:find('K/S') then
        return number * 1000
    else
        return number
    end
end

local function clearBillboards()
    if currentBillboard and currentBillboard.Parent then
        currentBillboard:Destroy()
    end
    currentBillboard = nil

    for _, conn in pairs(brainrotConnections) do
        conn:Disconnect()
    end
    brainrotConnections = {}

    currentTextSize = CONFIG.TEXT_SIZE_NEAR
    currentTextOffset = CONFIG.TEXT_OFFSET_NEAR
end

local function findMostValuablePet()
    local bestValue = 0
    local bestSpawn, bestName, bestSalary = nil, '', ''
    local foundAny = false

    for _, plotInstance in ipairs(plot:GetChildren()) do
        if not plotInstance:FindFirstChild('PlotSign') or not plotInstance:FindFirstChild('AnimalPodiums') then
            continue
        end

        local isPlayerPlot = plotInstance.PlotSign:FindFirstChild('YourBase') and plotInstance.PlotSign.YourBase.Enabled
        if not isPlayerPlot then
            for _, podium in ipairs(plotInstance.AnimalPodiums:GetChildren()) do
                if not podium:FindFirstChild('Base') or not podium.Base:FindFirstChild('Spawn') then
                    continue
                end

                local spawn = podium.Base.Spawn
                if not spawn:FindFirstChild('Attachment') then
                    continue
                end

                local overhead = spawn.Attachment:FindFirstChild('AnimalOverhead')
                if overhead and overhead:FindFirstChild('Generation') and overhead:FindFirstChild('DisplayName') then
                    local salaryText = overhead.Generation.Text
                    local value = parseSalaryValue(salaryText)
                    foundAny = true

                    if value > bestValue then
                        bestValue = value
                        bestSpawn = spawn
                        bestName = overhead.DisplayName.Text
                        bestSalary = salaryText
                    end
                end
            end
        end
    end

    return foundAny and bestSpawn or nil, bestName, bestSalary, bestValue
end

local function smoothLerp(current, target, alpha, deltaTime)
    local smoothing = math.min(alpha * deltaTime * 12, 1)
    return current + (target - current) * smoothing
end

local function calculateTextSize(distance)
    local normalizedDistance = math.clamp(distance / CONFIG.MAX_DISTANCE, 0, 1)
    local sizeFactor = 1 - (normalizedDistance * normalizedDistance * 0.8)
    return CONFIG.TEXT_SIZE_NEAR * sizeFactor + CONFIG.TEXT_SIZE_FAR * (1 - sizeFactor)
end

local function calculateTextOffset(distance)
    local normalizedDistance = math.clamp(distance / CONFIG.MAX_DISTANCE, 0, 1)
    local offsetFactor = normalizedDistance * normalizedDistance
    return CONFIG.TEXT_OFFSET_NEAR + (CONFIG.TEXT_OFFSET_FAR - CONFIG.TEXT_OFFSET_NEAR) * offsetFactor
end

local function createPetBillboard(spawn, name, salaryText)
    clearBillboards()
    if not spawn or not brainrotEnabled then
        return
    end

    if CONFIG.AUTO_COLOR then
        currentColor = generateLightColor()
    end

    local billboard = Instance.new('BillboardGui')
    billboard.Name = 'PetDisplay'
    billboard.Adornee = spawn
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(8, 0, 2, 0)
    billboard.StudsOffset = Vector3.new(0, currentTextOffset, 0)
    billboard.MaxDistance = CONFIG.MAX_DISTANCE
    billboard.Parent = spawn

    local textLabel = Instance.new('TextLabel')
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Text = name .. '\n' .. formatSalaryText(parseSalaryValue(salaryText))
    textLabel.TextColor3 = currentColor
    textLabel.TextStrokeColor3 = CONFIG.TEXT_STROKE_COLOR
    textLabel.TextStrokeTransparency = CONFIG.TEXT_STROKE_TRANSPARENCY
    textLabel.BackgroundTransparency = 1
    textLabel.TextSize = currentTextSize
    textLabel.Font = CONFIG.FONT
    textLabel.TextScaled = false
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.TextXAlignment = Enum.TextXAlignment.Center
    textLabel.FontFace = Font.new(
        'rbxasset://fonts/families/TitilliumWeb.json',
        CONFIG.FONT_WEIGHT,
        Enum.FontStyle.Normal
    )
    textLabel.Parent = billboard

    currentBillboard = billboard

    local lastUpdateTime = os.clock()

    local function updateBillboard()
        if not brainrotEnabled or not billboard or not billboard.Parent then
            return
        end

        local camera = Workspace.CurrentCamera
        if not camera then
            return
        end

        local currentTime = os.clock()
        local deltaTime = currentTime - lastUpdateTime
        lastUpdateTime = currentTime

        deltaTime = math.min(deltaTime, 0.1)

        local distance = (spawn.Position - camera.CFrame.Position).Magnitude
        
        local targetTextSize = calculateTextSize(distance)
        local targetTextOffset = calculateTextOffset(distance)

        currentTextSize = smoothLerp(currentTextSize, targetTextSize, CONFIG.SMOOTHING_FACTOR, deltaTime)
        currentTextOffset = smoothLerp(currentTextOffset, targetTextOffset, CONFIG.SMOOTHING_FACTOR, deltaTime)

        textLabel.TextSize = math.floor(currentTextSize + 0.5)
        billboard.StudsOffset = Vector3.new(0, currentTextOffset, 0)
    end

    local connection = RunService.RenderStepped:Connect(updateBillboard)
    table.insert(brainrotConnections, connection)
end

-- NAMETAGS функции
local TWEEN_INFO = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local function CalculateBackgroundWidth(text)
    local textSize = TextService:GetTextSize(
        text,
        14,
        Enum.Font.GothamBold,
        Vector2.new(1000, 22)
    )
    return math.max(60, textSize.X + 20)
end

local function GetDisplayName(player)
    return player.DisplayName
end

local function UpdateNameTag(nameTag, player)
    if not nameTag or not nameTag:FindFirstChild('Background') or not nameTag:FindFirstChild('Name') then
        return
    end

    local background = nameTag.Background
    local nameLabel = nameTag.Name
    local displayName = GetDisplayName(player)

    nameLabel.Text = displayName
    local newWidth = CalculateBackgroundWidth(displayName)

    local backgroundTween = TweenService:Create(background, TWEEN_INFO, {
        Size = UDim2.new(0, newWidth, 0, 18),
        Position = UDim2.new(0.5, -newWidth / 2, 0, 0)
    })
    backgroundTween:Play()

    local billboardTween = TweenService:Create(nameTag, TWEEN_INFO, {
        Size = UDim2.new(0, newWidth, 0, 18)
    })
    billboardTween:Play()
end

local function CreateNameTag(player)
    if not player.Character then
        return
    end
    local head = player.Character:FindFirstChild('Head')
    if not head then
        return
    end

    if NAMETAG_SETTINGS.ActiveNameTags[player] then
        NAMETAG_SETTINGS.ActiveNameTags[player]:Destroy()
        NAMETAG_SETTINGS.ActiveNameTags[player] = nil
    end

    local displayName = GetDisplayName(player)
    local width = CalculateBackgroundWidth(displayName)

    local billboard = Instance.new('BillboardGui')
    billboard.Name = 'Nametag_' .. player.Name
    billboard.Adornee = head
    billboard.Size = UDim2.new(0, width, 0, 18)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = 500
    billboard.Parent = head

    local background = Instance.new('Frame')
    background.Name = 'Background'
    background.Size = UDim2.new(0, width, 0, 18)
    background.Position = UDim2.new(0.5, -width / 2, 0, 0)
    background.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    background.BackgroundTransparency = 0.25
    background.BorderSizePixel = 0

    local corner = Instance.new('UICorner')
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = background
    background.Parent = billboard

    local nameLabel = Instance.new('TextLabel')
    nameLabel.Name = 'Name'
    nameLabel.Size = UDim2.new(1, -12, 1, 0)
    nameLabel.Position = UDim2.new(0, 6, 0, 0)
    nameLabel.Text = displayName
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextSize = 14
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextXAlignment = Enum.TextXAlignment.Center
    nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    nameLabel.TextStrokeTransparency = 0.3
    nameLabel.Parent = billboard

    NAMETAG_SETTINGS.ActiveNameTags[player] = billboard

    if not NAMETAG_SETTINGS.Connections[player] then
        NAMETAG_SETTINGS.Connections[player] = player:GetPropertyChangedSignal('DisplayName'):Connect(function()
            if NAMETAG_SETTINGS.Enabled and NAMETAG_SETTINGS.ActiveNameTags[player] then
                UpdateNameTag(billboard, player)
            end
        end)
    end
end

local function ToggleNameTags(state)
    NAMETAG_SETTINGS.Enabled = state

    if state then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                if not NAMETAG_SETTINGS.Connections[player] then
                    NAMETAG_SETTINGS.Connections[player] = player.CharacterAdded:Connect(function()
                        task.wait(1)
                        if NAMETAG_SETTINGS.Enabled then
                            CreateNameTag(player)
                        end
                    end)
                end
                if player.Character then
                    CreateNameTag(player)
                end
            end
        end

        Players.PlayerAdded:Connect(function(player)
            if player ~= Players.LocalPlayer then
                if not NAMETAG_SETTINGS.Connections[player] then
                    NAMETAG_SETTINGS.Connections[player] = player.CharacterAdded:Connect(function()
                        task.wait(1)
                        if NAMETAG_SETTINGS.Enabled then
                            CreateNameTag(player)
                        end
                    end)
                end
            end
        end)
    else
        for player, tag in pairs(NAMETAG_SETTINGS.ActiveNameTags) do
            if tag then
                tag:Destroy()
            end
        end
        NAMETAG_SETTINGS.ActiveNameTags = {}
    end
end

-- WALLHACK функции
local function createHighlight(character, player)
    if wallHighlights[player] then
        wallHighlights[player]:Destroy()
        wallHighlights[player] = nil
    end
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "Highlight"
    highlight.Adornee = character
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.FillColor = WALLHACK_SETTINGS.FillColor
    highlight.FillTransparency = WALLHACK_SETTINGS.FillTransparency
    highlight.OutlineColor = WALLHACK_SETTINGS.OutlineColor
    highlight.OutlineTransparency = WALLHACK_SETTINGS.OutlineTransparency
    highlight.Archivable = true
    highlight.Parent = character
    
    wallHighlights[player] = highlight
    return highlight
end

local function onPlayerAdded(player)
    if player == localPlayer then return end
    
    player.CharacterAdded:Connect(function(character)
        if WALLHACK_SETTINGS.Enabled then
            createHighlight(character, player)
        end
    end)
    
    if player.Character and WALLHACK_SETTINGS.Enabled then
        createHighlight(player.Character, player)
    end
end

local function onPlayerRemoving(player)
    -- Очистка WallHack
    if wallHighlights[player] then
        wallHighlights[player]:Destroy()
        wallHighlights[player] = nil
    end
    
    -- Очистка NameTags
    if NAMETAG_SETTINGS.ActiveNameTags[player] then
        NAMETAG_SETTINGS.ActiveNameTags[player]:Destroy()
        NAMETAG_SETTINGS.ActiveNameTags[player] = nil
    end
    
    -- Очистка соединений
    if NAMETAG_SETTINGS.Connections[player] then
        NAMETAG_SETTINGS.Connections[player]:Disconnect()
        NAMETAG_SETTINGS.Connections[player] = nil
    end
end

local function reloadWallHack()
    for player, highlight in pairs(wallHighlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    wallHighlights = {}
    
    if WALLHACK_SETTINGS.Enabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= localPlayer and player.Character then
                createHighlight(player.Character, player)
            end
        end
    end
end

-- TIMERESP функции
local function updateTimerESP()
    for _, timer in pairs(TIMERESP_SETTINGS.ActiveTimers) do
        if timer and timer.Parent then
            timer:Destroy()
        end
    end
    TIMERESP_SETTINGS.ActiveTimers = {}

    if not TIMERESP_SETTINGS.Enabled then
        return
    end

    for _, plotInstance in ipairs(plot:GetChildren()) do
        if plotInstance:FindFirstChild('PlotSign') and plotInstance:FindFirstChild('AnimalPodiums') then
            for _, podium in ipairs(plotInstance.AnimalPodiums:GetChildren()) do
                if podium:FindFirstChild('Base') and podium.Base:FindFirstChild('Spawn') then
                    local spawn = podium.Base.Spawn
                    if spawn:FindFirstChild('Attachment') then
                        local attachment = spawn.Attachment
                        if attachment:FindFirstChild('AnimalOverhead') then
                            local overhead = attachment.AnimalOverhead
                            if overhead:FindFirstChild('Timer') and overhead.Timer:IsA('TextLabel') then
                                local timerText = overhead.Timer.Text
                                if timerText ~= '' and timerText ~= 'Ready!' then
                                    local billboard = Instance.new('BillboardGui')
                                    billboard.Name = 'TimerESP'
                                    billboard.Adornee = spawn
                                    billboard.AlwaysOnTop = true
                                    billboard.Size = UDim2.new(8, 0, 2, 0)
                                    billboard.StudsOffset = Vector3.new(0, 3, 0)
                                    billboard.MaxDistance = 500
                                    billboard.Parent = spawn

                                    local textLabel = Instance.new('TextLabel')
                                    textLabel.Size = UDim2.new(1, 0, 1, 0)
                                    textLabel.Text = timerText
                                    textLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
                                    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                                    textLabel.TextStrokeTransparency = 0
                                    textLabel.BackgroundTransparency = 1
                                    textLabel.TextSize = 20
                                    textLabel.Font = Enum.Font.TitilliumWeb
                                    textLabel.TextScaled = false
                                    textLabel.TextYAlignment = Enum.TextYAlignment.Center
                                    textLabel.TextXAlignment = Enum.TextXAlignment.Center
                                    textLabel.FontFace = Font.new(
                                        'rbxasset://fonts/families/TitilliumWeb.json',
                                        Enum.FontWeight.Bold,
                                        Enum.FontStyle.Normal
                                    )
                                    textLabel.Parent = billboard

                                    TIMERESP_SETTINGS.ActiveTimers[spawn] = billboard
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

-- Основная функция инициализации
local function initializeScript()
    -- Инициализация WallHack
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            onPlayerAdded(player)
        end
    end
    
    Players.PlayerAdded:Connect(onPlayerAdded)
    Players.PlayerRemoving:Connect(onPlayerRemoving)
    
    -- Инициализация NameTags
    ToggleNameTags(NAMETAG_SETTINGS.Enabled)
    
    -- Инициализация TimerESP
    local function updateTimerLoop()
        while task.wait(1) do
            if TIMERESP_SETTINGS.Enabled then
                updateTimerESP()
            end
        end
    end
    task.spawn(updateTimerLoop)
    
    -- Инициализация BRAINROT ESP
    local function updateBrainrotESP()
        while task.wait(CONFIG.UPDATE_INTERVAL) do
            if brainrotEnabled then
                local bestSpawn, bestName, bestSalary, bestValue = findMostValuablePet()
                
                if bestSpawn then
                    if bestValue >= lastBestValue * CONFIG.VALUE_THRESHOLD or bestSpawn ~= lastBestSpawn then
                        createPetBillboard(bestSpawn, bestName, bestSalary)
                        lastBestValue = bestValue
                        lastBestSpawn = bestSpawn
                    end
                else
                    clearBillboards()
                    lastBestValue = 0
                    lastBestSpawn = nil
                end
            else
                clearBillboards()
            end
        end
    end
    task.spawn(updateBrainrotESP)
end

-- Очистка всех ESP при выходе игрока или респавне
local function cleanupESP()
    -- Очистка BRAINROT ESP
    clearBillboards()
    
    -- Очистка WALLHACK
    for player, highlight in pairs(wallHighlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    wallHighlights = {}
    
    -- Очистка NAMETAGS
    for player, tag in pairs(NAMETAG_SETTINGS.ActiveNameTags) do
        if tag then
            tag:Destroy()
        end
    end
    NAMETAG_SETTINGS.ActiveNameTags = {}
    
    -- Очистка соединений NAMETAGS
    for player, conn in pairs(NAMETAG_SETTINGS.Connections) do
        if conn then
            conn:Disconnect()
        end
    end
    NAMETAG_SETTINGS.Connections = {}
    
    -- Очистка TIMERESP
    for _, timer in pairs(TIMERESP_SETTINGS.ActiveTimers) do
        if timer and timer.Parent then
            timer:Destroy()
        end
    end
    TIMERESP_SETTINGS.ActiveTimers = {}
end

-- Обработка выхода/респавна локального игрока
localPlayer.CharacterRemoving:Connect(function()
    cleanupESP()
end)

localPlayer.CharacterAdded:Connect(function(character)
    task.wait(2) -- Ждем полной загрузки персонажа
    cleanupESP()
    initializeScript()
end)

-- Запуск скрипта
initializeScript()

print("All ESP features loaded successfully!")
print("Features: BRAINROT ESP, WALLHACK, NAMETAGS, TIMERESP")
print("Auto-cleanup on respawn/exit enabled")
