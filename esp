local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local ProximityPromptService = game:GetService('ProximityPromptService')
local TweenService = game:GetService('TweenService')

local player = Players.LocalPlayer
local playerGui = player:WaitForChild('PlayerGui')
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild('HumanoidRootPart')

-- Script states
local isActive = false
local isMoving = false
local promptTriggered = false
local armCheckConnection = nil
local promptConnection = nil
local activeConnections = {}
local screenGui = nil

-- Цвета для нового стиля
local mainColor = Color3.fromRGB(25, 25, 25)
local accentColor = Color3.fromRGB(0, 255, 140)
local textColor = Color3.fromRGB(255, 255, 255)
local borderColor = Color3.fromRGB(50, 50, 50)

-- === REDESIGNED MENU ===
local function createMenu()
    if screenGui and screenGui.Parent then
        screenGui:Destroy()
    end

    screenGui = Instance.new('ScreenGui')
    screenGui.Name = 'ForestSpiritControl'
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local mainFrame = Instance.new('Frame')
    mainFrame.Size = UDim2.new(0, 292, 0, 150)
    mainFrame.Position = UDim2.new(0.5, -625, 0.3, 0)
    mainFrame.BackgroundColor3 = mainColor
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui

    local uiCorner = Instance.new('UICorner')
    uiCorner.CornerRadius = UDim.new(0, 6)
    uiCorner.Parent = mainFrame

    local mainShadow = Instance.new('UIStroke')
    mainShadow.Thickness = 2
    mainShadow.Color = borderColor
    mainShadow.LineJoinMode = Enum.LineJoinMode.Round
    mainShadow.Parent = mainFrame

    local headerFrame = Instance.new('Frame')
    headerFrame.Size = UDim2.new(1, 0, 0, 33)
    headerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    headerFrame.BorderSizePixel = 0
    headerFrame.Parent = mainFrame

    local headerCorner = Instance.new('UICorner')
    headerCorner.CornerRadius = UDim.new(0, 6)
    headerCorner.Parent = headerFrame

    local headerLabel = Instance.new('TextLabel')
    headerLabel.Size = UDim2.new(1, 0, 1, 0)
    headerLabel.BackgroundTransparency = 1
    headerLabel.Text = 'Auto-Steal v2'
    headerLabel.TextColor3 = accentColor
    headerLabel.TextSize = 15
    headerLabel.Font = Enum.Font.Code
    headerLabel.Parent = headerFrame

    local statusPanel = Instance.new('Frame')
    statusPanel.Size = UDim2.new(1, -17, 0, 50)
    statusPanel.Position = UDim2.new(0, 8, 0, 42)
    statusPanel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    statusPanel.BorderSizePixel = 0
    statusPanel.Parent = mainFrame

    local statusCorner = Instance.new('UICorner')
    statusCorner.CornerRadius = UDim.new(0, 6)
    statusCorner.Parent = statusPanel

    local statusLabel = Instance.new('TextLabel')
    statusLabel.Size = UDim2.new(1, -8, 1, -8)
    statusLabel.Position = UDim2.new(0, 4, 0, 4)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = 'Press START to begin'
    statusLabel.TextColor3 = textColor
    statusLabel.TextSize = 16
    statusLabel.Font = Enum.Font.Code
    statusLabel.TextWrapped = true
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = statusPanel

    local buttonsFrame = Instance.new('Frame')
    buttonsFrame.Size = UDim2.new(1, -17, 0, 42)
    buttonsFrame.Position = UDim2.new(0, 8, 0, 100)
    buttonsFrame.BackgroundTransparency = 1
    buttonsFrame.Parent = mainFrame

    local actionBtn = Instance.new('TextButton')
    actionBtn.Size = UDim2.new(1, 0, 1, 0)
    actionBtn.BackgroundColor3 = mainColor
    actionBtn.Text = 'START'
    actionBtn.TextColor3 = textColor
    actionBtn.TextSize = 18
    actionBtn.Font = Enum.Font.Code
    actionBtn.Parent = buttonsFrame

    local actionCorner = Instance.new('UICorner')
    actionCorner.CornerRadius = UDim.new(0, 6)
    actionCorner.Parent = actionBtn

    local btnStroke = Instance.new('UIStroke')
    btnStroke.Thickness = 2
    btnStroke.Color = borderColor
    btnStroke.LineJoinMode = Enum.LineJoinMode.Round
    btnStroke.Parent = actionBtn

    -- Эффекты при наведении
    actionBtn.MouseEnter:Connect(function()
        TweenService:Create(
            actionBtn,
            TweenInfo.new(0.2),
            {BackgroundColor3 = Color3.fromRGB(35, 35, 35)}
        ):Play()
    end)

    actionBtn.MouseLeave:Connect(function()
        TweenService:Create(
            actionBtn,
            TweenInfo.new(0.2),
            {BackgroundColor3 = mainColor}
        ):Play()
    end)

    -- === DRAGGABLE FUNCTIONALITY ===
    local dragging = false
    local dragStart = nil
    local startPos = nil

    headerFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)

    headerFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if
            dragging
            and input.UserInputType == Enum.UserInputType.MouseMovement
        then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    return statusLabel, actionBtn, mainFrame
end

-- === FUNCTION TO UPDATE STATUS LABEL ===
local function updateStatus(text)
    if statusLabel then
        statusLabel.Text = text
    end
end

local statusLabel, actionBtn, mainFrame = createMenu()

-- === RESET STATUS ON CHARACTER RESPAWN ===
table.insert(
    activeConnections,
    player.CharacterAdded:Connect(function(newCharacter)
        character = newCharacter
        hrp = newCharacter:WaitForChild('HumanoidRootPart')
        updateStatus('Ready to work')
    end)
)

-- === SCRIPT FUNCTIONALITY ===
local function FindDelivery()
    local plots = workspace:FindFirstChild('Plots')
    if not plots then
        warn('Plots folder not found in workspace')
        return
    end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild('PlotSign')
        if sign then
            local yourBase = sign:FindFirstChild('YourBase')
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild('DeliveryHitbox')
                if hitbox then
                    return hitbox
                end
            end
        end
    end
    warn('No valid DeliveryHitbox found')
end

local function setupFlight()
    if hrp:FindFirstChild('FlightAttachment') then
        hrp.FlightAttachment:Destroy()
    end
    if hrp:FindFirstChildOfClass('LinearVelocity') then
        hrp:FindFirstChildOfClass('LinearVelocity'):Destroy()
    end

    local attachment = Instance.new('Attachment')
    attachment.Name = 'FlightAttachment'
    attachment.Parent = hrp

    local lv = Instance.new('LinearVelocity')
    lv.Attachment0 = attachment
    lv.RelativeTo = Enum.ActuatorRelativeTo.World
    lv.MaxForce = math.huge
    lv.Name = 'FlightVelocity'
    lv.Parent = hrp
    return lv, attachment
end

local function moveToDelivery()
    local targetHitbox = FindDelivery()
    if not targetHitbox then
        warn('No target to move towards')
        updateStatus('No delivery target found')
        return
    end

    for _, obj in ipairs(hrp:GetChildren()) do
        if obj:IsA('LinearVelocity') or obj:IsA('Attachment') then
            obj:Destroy()
        end
    end

    local lv, attachment = setupFlight()
    updateStatus('Flying to delivery...')
    task.wait(0.2)

    local speed = 25
    local reached = false
    local maxTime = 8
    local startTime = tick()

    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not isMoving then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            return
        end

        if not targetHitbox or not targetHitbox:IsDescendantOf(workspace) then
            warn('Target lost during flight')
            updateStatus('Delivery target lost')
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reached = true
            return
        end

        local targetPos = targetHitbox.Position - Vector3.new(0, 6, 0)
        local direction = (targetPos - hrp.Position)
        local distance = direction.Magnitude

        if distance <= 0.5 then
            updateStatus(
                'Reached delivery target, distance: ' .. math.floor(distance)
            )
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reached = true
            local humanoid = character:FindFirstChild('Humanoid')
            if humanoid then
                humanoid.PlatformStand = false
                updateStatus('PlatformStand disabled')
            end
            return
        end

        if tick() - startTime >= maxTime then
            warn('Timeout before reaching delivery target')
            updateStatus('Timeout during delivery')
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reached = true
            return
        end

        local unitDir = direction.Unit
        lv.VectorVelocity =
            Vector3.new(unitDir.X * speed, unitDir.Y * speed, unitDir.Z * speed)
        updateStatus('Moving to delivery, distance: ' .. math.floor(distance))
    end)

    while not reached do
        task.wait(0.12)
    end

    if not isMoving then
        return
    end

    updateStatus('Starting smooth deceleration for delivery')
    lv, attachment = setupFlight()
    for i = 1, 12 do
        if not isMoving then
            break
        end
        local dir = (
            targetHitbox.Position
            - Vector3.new(0, 6, 0)
            - hrp.Position
        )
        if dir.Magnitude > 0 then
            dir = dir.Unit
            lv.VectorVelocity =
                Vector3.new(dir.X * speed, dir.Y * speed, dir.Z * speed)
            updateStatus('Decelerating for delivery, iteration: ' .. i)
        else
            lv.VectorVelocity = Vector3.zero
        end
        task.wait(0.05)
    end
    lv:Destroy()

    if not isMoving then
        return
    end

    updateStatus('Starting smooth descent for delivery')
    lv, attachment = setupFlight()
    local targetY = targetHitbox.Position.Y - 6 + 2.5
    local reachedY = false
    connection = RunService.Heartbeat:Connect(function()
        if not isMoving then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reachedY = true
            return
        end

        if hrp.Position.Y <= targetY then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reachedY = true
            local humanoid = character:FindFirstChild('Humanoid')
            if humanoid then
                humanoid.PlatformStand = false
                updateStatus('PlatformStand disabled')
            end
            return
        end
        lv.VectorVelocity = Vector3.new(0, -speed, 0)
        updateStatus(
            'Descending for delivery, current Y: ' .. math.floor(hrp.Position.Y)
        )
    end)

    while not reachedY do
        task.wait(0.05)
    end

    updateStatus('Cleaning up delivery objects')
    task.delay(0.5, function()
        if attachment then
            attachment:Destroy()
        end
        if isMoving then
            updateStatus('Idle')
            isMoving = false
            actionBtn.Text = 'START'
            actionBtn.BackgroundColor3 = mainColor
        end
    end)
end

local function getLaserCenter(model)
    if not model:IsA('Model') then
        return nil
    end
    local primary = model.PrimaryPart
        or model:FindFirstChildWhichIsA('BasePart')
    if not primary then
        return nil
    end
    return primary.Position
end

local function isSizeClose(partSize, targetSize, tolerance)
    return math.abs(partSize.X - targetSize.X) <= tolerance
        and math.abs(partSize.Y - targetSize.Y) <= tolerance
        and math.abs(partSize.Z - targetSize.Z) <= tolerance
end

local function getTargetForFloor(level, fromThirdFloor)
    local closestTarget, closestDistance = nil, math.huge

    for _, plot in ipairs(workspace:WaitForChild('Plots'):GetChildren()) do
        if level == 1 then
            local laserFolder = plot:FindFirstChild('Laser')
            if laserFolder then
                for _, laser in ipairs(laserFolder:GetChildren()) do
                    if laser:IsA('Model') then
                        local pos = getLaserCenter(laser)
                        if pos and pos.Y <= 8 then
                            local dist = (pos - hrp.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestTarget = laser
                            end
                        end
                    end
                end
            end
        elseif level == 2 then
            if not fromThirdFloor then
                local modelFolder = plot:FindFirstChild('Model')
                local foundInitialTarget = false
                if modelFolder then
                    for _, obj in ipairs(modelFolder:GetChildren()) do
                        if
                            obj:IsA('BasePart')
                            and isSizeClose(
                                obj.Size,
                                Vector3.new(5, 1, 1),
                                0.01
                            )
                        then
                            local dist = (obj.Position - hrp.Position).Magnitude
                            if dist < 5 then
                                if dist < closestDistance then
                                    closestDistance = dist
                                    closestTarget = obj
                                    foundInitialTarget = true
                                end
                            end
                        end
                    end
                end
                if not foundInitialTarget then
                    local decorations = plot:FindFirstChild('Decorations')
                    if decorations then
                        for _, obj in ipairs(decorations:GetChildren()) do
                            if
                                obj:IsA('BasePart')
                                and isSizeClose(
                                    obj.Size,
                                    Vector3.new(45, 45, 2),
                                    0.01
                                )
                            then
                                local posY = obj.Position.Y
                                if posY >= 8 and posY <= 9.1 then
                                    local dist = (obj.Position - hrp.Position).Magnitude
                                    if dist < closestDistance then
                                        closestDistance = dist
                                        closestTarget = obj
                                    end
                                end
                            end
                        end
                    end
                end
            else
                local decorations = plot:FindFirstChild('Decorations')
                if decorations then
                    for _, obj in ipairs(decorations:GetChildren()) do
                        if
                            obj:IsA('BasePart')
                            and isSizeClose(
                                obj.Size,
                                Vector3.new(17, 10, 2),
                                0.01
                            )
                        then
                            local dist = (obj.Position - hrp.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestTarget = obj
                            end
                        end
                    end
                end
            end
        elseif level == 3 then
            local laserHitboxFolder = plot:FindFirstChild('LaserHitbox')
            if laserHitboxFolder then
                local thirdFloorPart =
                    laserHitboxFolder:FindFirstChild('ThirdFloor')
                if thirdFloorPart then
                    local dist = (thirdFloorPart.Position - hrp.Position).Magnitude
                    if dist < closestDistance then
                        closestDistance = dist
                        closestTarget = thirdFloorPart
                    end
                end
            end
        end
    end

    return closestTarget
end

local function moveToX410()
    updateStatus('Moving to X=-410...')
    local lv, attachment = setupFlight()
    task.wait(0.2)

    local targetX = -410
    local targetY = hrp.Position.Y -- Сохраняем текущую высоту
    local targetZ = hrp.Position.Z -- Сохраняем текущую позицию по Z
    local targetPos = Vector3.new(targetX, targetY, targetZ)
    local direction = (targetPos - hrp.Position)
    local distance = direction.Magnitude
    local speed = 25
    local reached = false

    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not isMoving then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            return
        end

        local currentX = hrp.Position.X
        if math.abs(currentX - targetX) <= 0.5 then
            updateStatus('Reached X=-410')
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            connection:Disconnect()
            reached = true
            return
        end

        -- Двигаемся только по оси X, сохраняя высоту и позицию по Z
        local dir = (Vector3.new(targetX, targetY, targetZ) - hrp.Position)
        if dir.Magnitude > 0 then
            dir = dir.Unit
            lv.VectorVelocity =
                Vector3.new(dir.X * speed, 0, 0) -- Нулевая скорость по Y и Z
            updateStatus(
                'Moving to X=-410, distance: ' .. math.floor(dir.Magnitude)
            )
        else
            lv.VectorVelocity = Vector3.zero
        end
    end)

    while not reached do
        task.wait(0.12)
    end

    if not isMoving then
        return
    end

    updateStatus('Starting smooth deceleration for X=-410')
    lv, attachment = setupFlight()
    for i = 1, 12 do
        if not isMoving then
            break
        end
        local dir = (Vector3.new(targetX, targetY, targetZ) - hrp.Position)
        if dir.Magnitude > 0 then
            dir = dir.Unit
            lv.VectorVelocity = Vector3.new(dir.X * speed, 0, 0)
            updateStatus('Decelerating for X=-410, iteration: ' .. i)
        else
            lv.VectorVelocity = Vector3.zero
        end
        task.wait(0.05)
    end
    lv:Destroy()

    if not isMoving then
        return
    end

    updateStatus('Cleaning up flight objects for X=-410')
    task.delay(0.5, function()
        if attachment then
            attachment:Destroy()
        end
    end)
end

local function main()
    if isMoving then
        updateStatus('Stopping...')
        isMoving = false
        actionBtn.Text = 'START'
        actionBtn.BackgroundColor3 = mainColor
        return
    end

    isMoving = true
    actionBtn.Text = 'STOP'
    actionBtn.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    updateStatus('Starting movement sequence...')

    -- Двигаемся к X=-410 без изменения высоты
    moveToX410()

    if not isMoving then
        return
    end

    -- Продолжаем с остальной логикой...
    -- [Остальной код остается без изменений]
end

-- === BUTTON CLICK HANDLER ===
actionBtn.MouseButton1Click:Connect(main)

-- === CLEANUP ON SCRIPT TERMINATION ===
table.insert(
    activeConnections,
    player.CharacterRemoving:Connect(function()
        if isMoving then
            isMoving = false
            actionBtn.Text = 'START'
            actionBtn.BackgroundColor3 = mainColor
            updateStatus('Character removed, stopping...')
        end
    end)
)

table.insert(
    activeConnections,
    game:GetService('UserInputService').WindowFocusReleased:Connect(function()
        if isMoving then
            isMoving = false
            actionBtn.Text = 'START'
            actionBtn.BackgroundColor3 = mainColor
            updateStatus('Window focus lost, stopping...')
        end
    end)
)

-- === INITIAL STATUS ===
updateStatus('Ready to work')
