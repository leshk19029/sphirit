--[[
    Amethyst UI Library
    Стилизованная библиотека с сиреневой цветовой схемой
]]

local Amethyst = {}
Amethyst.__index = Amethyst

-- Сервисы
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Цветовая схема
local ColorScheme = {
    Primary = Color3.fromRGB(170, 102, 204),
    Secondary = Color3.fromRGB(140, 82, 174),
    Accent = Color3.fromRGB(200, 132, 234),
    Background = Color3.fromRGB(30, 25, 35),
    Text = Color3.fromRGB(240, 240, 240),
    Border = Color3.fromRGB(80, 60, 100)
}

-- Утилиты
local function Create(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

function Amethyst.new(name)
    local self = setmetatable({}, Amethyst)
    
    self.Name = name or "AmethystUI"
    self.Enabled = false
    self.Windows = {}
    self.CurrentWindow = nil
    
    self:CreateMainUI()
    
    return self
end

function Amethyst:CreateMainUI()
    -- Экранная GUI
    self.ScreenGui = Create("ScreenGui", {
        Name = self.Name,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Основной контейнер
    self.MainFrame = Create("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 500, 0, 400),
        Position = UDim2.new(0.5, -250, 0.5, -200),
        BackgroundColor3 = ColorScheme.Background,
        BorderColor3 = ColorScheme.Border,
        BorderSizePixel = 2,
        Visible = false,
        Parent = self.ScreenGui
    })
    
    -- Заголовок
    self.Header = Create("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = ColorScheme.Primary,
        BorderSizePixel = 0,
        Parent = self.MainFrame
    })
    
    self.Title = Create("TextLabel", {
        Name = "Title",
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = self.Name,
        TextColor3 = ColorScheme.Text,
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.Header
    })
    
    self.CloseButton = Create("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -25, 0.5, -10),
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Text = "X",
        TextColor3 = ColorScheme.Text,
        Font = Enum.Font.GothamBold,
        TextSize = 12,
        Parent = self.Header
    })
    
    -- Контейнер вкладок
    self.TabContainer = Create("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        Parent = self.MainFrame
    })
    
    -- Контейнер контента
    self.ContentFrame = Create("ScrollingFrame", {
        Name = "ContentFrame",
        Size = UDim2.new(1, -20, 1, -70),
        Position = UDim2.new(0, 10, 0, 70),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = ColorScheme.Primary,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = self.MainFrame
    })
    
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
    
    -- Перетаскивание
    local dragging = false
    local dragInput, dragStart, startPos
    
    self.Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    self.Header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            local delta = input.Position - dragStart
            self.MainFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X,
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Привязка к клавише
    UserInputService.InputBegan:Connect(function(input, processed)
        if not processed and input.KeyCode == Enum.KeyCode.RightShift then
            self:Toggle()
        end
    end)
    
    self.ScreenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
end

function Amethyst:Toggle()
    self.Enabled = not self.Enabled
    self.MainFrame.Visible = self.Enabled
    
    if self.Enabled then
        self.MainFrame.Size = UDim2.new(0, 0, 0, 0)
        TweenService:Create(self.MainFrame, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 500, 0, 400)
        }):Play()
    else
        local tween = TweenService:Create(self.MainFrame, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 0, 0, 0)
        })
        tween:Play()
        tween.Completed:Connect(function()
            if not self.Enabled then
                self.MainFrame.Visible = false
            end
        end)
    end
end

function Amethyst:Window(name)
    local window = {
        Name = name,
        Tabs = {},
        CurrentTab = nil
    }
    
    setmetatable(window, self)
    table.insert(self.Windows, window)
    
    if #self.Windows == 1 then
        self.CurrentWindow = window
    end
    
    return window
end

function Amethyst:Tab(name)
    local tab = {
        Name = name,
        Elements = {},
        Container = nil
    }
    
    -- Создание кнопки вкладки
    local tabButton = Create("TextButton", {
        Name = name .. "Tab",
        Size = UDim2.new(0, 80, 1, 0),
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Text = name,
        TextColor3 = ColorScheme.Text,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        Parent = self.TabContainer
    })
    
    -- Контейнер для элементов вкладки
    local tabContent = Create("Frame", {
        Name = name .. "Content",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Visible = false,
        Parent = self.ContentFrame
    })
    
    tab.Container = tabContent
    
    tabButton.MouseButton1Click:Connect(function()
        self:SwitchTab(tab)
    end)
    
    table.insert(self.Tabs, tab)
    
    if #self.Tabs == 1 then
        self:SwitchTab(tab)
    end
    
    return tab
end

function Amethyst:SwitchTab(tab)
    for _, existingTab in pairs(self.Tabs) do
        existingTab.Container.Visible = false
    end
    
    tab.Container.Visible = true
    self.CurrentTab = tab
    
    -- Обновление размера канваса
    local totalHeight = 0
    for _, element in pairs(tab.Elements) do
        totalHeight += element.Size.Y.Offset + 5
    end
    self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
end

function Amethyst:Button(text, callback)
    local button = Create("TextButton", {
        Name = text .. "Button",
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 5, 0, #self.CurrentTab.Elements * 35),
        BackgroundColor3 = ColorScheme.Primary,
        BorderColor3 = ColorScheme.Border,
        BorderSizePixel = 1,
        Text = text,
        TextColor3 = ColorScheme.Text,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        Parent = self.CurrentTab.Container
    })
    
    button.MouseButton1Click:Connect(callback)
    
    table.insert(self.CurrentTab.Elements, button)
    self:UpdateCanvasSize()
    
    return button
end

function Amethyst:Toggle(text, default, callback)
    local toggle = {
        Value = default or false,
        Callback = callback
    }
    
    local frame = Create("Frame", {
        Name = text .. "Toggle",
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 5, 0, #self.CurrentTab.Elements * 35),
        BackgroundTransparency = 1,
        Parent = self.CurrentTab.Container
    })
    
    local label = Create("TextLabel", {
        Name = "Label",
        Size = UDim2.new(0.7, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = ColorScheme.Text,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = frame
    })
    
    local toggleButton = Create("TextButton", {
        Name = "Toggle",
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -40, 0.5, -10),
        BackgroundColor3 = toggle.Value and ColorScheme.Accent or ColorScheme.Secondary,
        BorderSizePixel = 0,
        Text = "",
        Parent = frame
    })
    
    local toggleDot = Create("Frame", {
        Name = "Dot",
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(0, toggle.Value and 22 or 2, 0.5, -6),
        BackgroundColor3 = ColorScheme.Text,
        BorderSizePixel = 0,
        Parent = toggleButton
    })
    
    toggleButton.MouseButton1Click:Connect(function()
        toggle.Value = not toggle.Value
        toggleButton.BackgroundColor3 = toggle.Value and ColorScheme.Accent or ColorScheme.Secondary
        toggleDot.Position = UDim2.new(0, toggle.Value and 22 or 2, 0.5, -6)
        
        if toggle.Callback then
            toggle.Callback(toggle.Value)
        end
    end)
    
    table.insert(self.CurrentTab.Elements, frame)
    self:UpdateCanvasSize()
    
    return toggle
end

function Amethyst:Slider(text, min, max, default, callback)
    local slider = {
        Value = default or min,
        Min = min,
        Max = max,
        Callback = callback
    }
    
    local frame = Create("Frame", {
        Name = text .. "Slider",
        Size = UDim2.new(1, -10, 0, 50),
        Position = UDim2.new(0, 5, 0, #self.CurrentTab.Elements * 55),
        BackgroundTransparency = 1,
        Parent = self.CurrentTab.Container
    })
    
    local label = Create("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = text .. ": " .. tostring(slider.Value),
        TextColor3 = ColorScheme.Text,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = frame
    })
    
    local track = Create("Frame", {
        Name = "Track",
        Size = UDim2.new(1, 0, 0, 4),
        Position = UDim2.new(0, 0, 0, 25),
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Parent = frame
    })
    
    local fill = Create("Frame", {
        Name = "Fill",
        Size = UDim2.new((slider.Value - min) / (max - min), 0, 1, 0),
        BackgroundColor3 = ColorScheme.Primary,
        BorderSizePixel = 0,
        Parent = track
    })
    
    local handle = Create("Frame", {
        Name = "Handle",
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new((slider.Value - min) / (max - min), -6, 0.5, -6),
        BackgroundColor3 = ColorScheme.Accent,
        BorderSizePixel = 0,
        Parent = track
    })
    
    local dragging = false
    
    local function updateValue(value)
        value = math.clamp(value, min, max)
        slider.Value = math.floor(value)
        label.Text = text .. ": " .. tostring(slider.Value)
        
        local ratio = (slider.Value - min) / (max - min)
        fill.Size = UDim2.new(ratio, 0, 1, 0)
        handle.Position = UDim2.new(ratio, -6, 0.5, -6)
        
        if slider.Callback then
            slider.Callback(slider.Value)
        end
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    handle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation()
            local absolutePos = track.AbsolutePosition
            local absoluteSize = track.AbsoluteSize
            
            local relativeX = (mousePos.X - absolutePos.X) / absoluteSize.X
            local value = min + (max - min) * relativeX
            
            updateValue(value)
        end
    end)
    
    table.insert(self.CurrentTab.Elements, frame)
    self:UpdateCanvasSize()
    
    return slider
end

function Amethyst:UpdateCanvasSize()
    local totalHeight = 0
    for _, element in pairs(self.CurrentTab.Elements) do
        totalHeight += element.Size.Y.Offset + 5
    end
    self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
end

-- Инициализация библиотеки
local function Init()
    local library = Amethyst.new("Amethyst UI")
    return library
end

return Init()
