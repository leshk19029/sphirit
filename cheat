local Players = game:GetService('Players')
local UserInputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')

local player = Players.LocalPlayer
local mouse = player:GetMouse()

local menuEnabled = false
local mainColor = Color3.fromRGB(25, 25, 25)
local accentColor = Color3.fromRGB(0, 255, 140)
local textColor = Color3.fromRGB(255, 255, 255)
local borderColor = Color3.fromRGB(50, 50, 50)

local mainDragging = false
local toggleDragging = false
local mainDragStart, mainStartPos
local toggleDragStart, toggleStartPos
local wasDragging = false

-- Кэшированные функции
local cachedFunctions = {
    AntiEffects = nil,
    AutoSteal = nil,
    ESP = nil,
    ControlPlayer = nil,
}

-- Состояния функций
local functionStates = {
    AntiEffects = false,
    AutoSteal = false,
    ESP = false,
    ControlPlayer = false,
}

-- Создаем GUI
local screenGui = Instance.new('ScreenGui')
screenGui.Name = 'AntiEffectsMenu'
screenGui.Parent = player:WaitForChild('PlayerGui')
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Создаем кружочек для открытия/закрытия меню
local toggleButton = Instance.new('TextButton')
toggleButton.Size = UDim2.new(0, 60, 0, 60)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.BackgroundColor3 = mainColor
toggleButton.BorderSizePixel = 0
toggleButton.Text = 'P'
toggleButton.TextColor3 = accentColor
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextSize = 24
toggleButton.ZIndex = 10
toggleButton.Parent = screenGui

local toggleButtonCorner = Instance.new('UICorner')
toggleButtonCorner.CornerRadius = UDim.new(1, 0)
toggleButtonCorner.Parent = toggleButton

local toggleButtonStroke = Instance.new('UIStroke')
toggleButtonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
toggleButtonStroke.Color = borderColor
toggleButtonStroke.Thickness = 2
toggleButtonStroke.LineJoinMode = Enum.LineJoinMode.Round
toggleButtonStroke.Parent = toggleButton

-- Главное меню
local mainFrame = Instance.new('Frame')
mainFrame.Size = UDim2.new(0, 250, 0, 240)
mainFrame.Position = UDim2.new(0, 80, 0, 10)
mainFrame.BackgroundColor3 = mainColor
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

local mainFrameStroke = Instance.new('UIStroke')
mainFrameStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
mainFrameStroke.Color = borderColor
mainFrameStroke.Thickness = 2
mainFrameStroke.LineJoinMode = Enum.LineJoinMode.Round
mainFrameStroke.Parent = mainFrame

local mainFrameCorner = Instance.new('UICorner')
mainFrameCorner.CornerRadius = UDim.new(0, 8)
mainFrameCorner.Parent = mainFrame

-- Title bar
local titleBar = Instance.new('Frame')
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleBarCorner = Instance.new('UICorner')
titleBarCorner.CornerRadius = UDim.new(0, 8)
titleBarCorner.Parent = titleBar

local title = Instance.new('TextLabel')
title.Size = UDim2.new(1, 0, 1, 0)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = 'PURY'
title.TextColor3 = accentColor
title.Font = Enum.Font.GothamBold
title.TextSize = 18
title.TextXAlignment = Enum.TextXAlignment.Center
title.TextYAlignment = Enum.TextYAlignment.Center
title.Parent = titleBar

local contentFrame = Instance.new('Frame')
contentFrame.Size = UDim2.new(1, -20, 1, -40)
contentFrame.Position = UDim2.new(0, 10, 0, 35)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = mainFrame

-- Функция перетаскивания меню
local function updateMain(input)
    if not mainDragging then
        return
    end

    local delta = input.Position - mainDragStart
    local newX = mainStartPos.X.Offset + delta.X
    local newY = mainStartPos.Y.Offset + delta.Y

    newX = math.clamp(newX, 0, screenGui.AbsoluteSize.X - mainFrame.AbsoluteSize.X)
    newY = math.clamp(newY, 0, screenGui.AbsoluteSize.Y - mainFrame.AbsoluteSize.Y)

    mainFrame.Position = UDim2.new(0, newX, 0, newY)
end

-- Функция перетаскивания кружочка
local function updateToggle(input)
    if not toggleDragging then
        return
    end

    local delta = input.Position - toggleDragStart
    local newX = toggleStartPos.X.Offset + delta.X
    local newY = toggleStartPos.Y.Offset + delta.Y

    newX = math.clamp(newX, 0, screenGui.AbsoluteSize.X - toggleButton.AbsoluteSize.X)
    newY = math.clamp(newY, 0, screenGui.AbsoluteSize.Y - toggleButton.AbsoluteSize.Y)

    toggleButton.Position = UDim2.new(0, newX, 0, newY)
end

-- Перетаскивание за titleBar
titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mainDragging = true
        mainDragStart = input.Position
        mainStartPos = mainFrame.Position
    end
end)

titleBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mainDragging = false
    end
end)

-- Перетаскивание за задний фон меню
mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mainDragging = true
        mainDragStart = input.Position
        mainStartPos = mainFrame.Position
    end
end)

mainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mainDragging = false
    end
end)

-- Перетаскивание кружочка
toggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        toggleDragging = true
        wasDragging = false
        toggleDragStart = input.Position
        toggleStartPos = toggleButton.Position
    end
end)

toggleButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        toggleDragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        if mainDragging then
            updateMain(input)
        end
        if toggleDragging then
            updateToggle(input)
            wasDragging = true
        end
    end
end)

-- Функция переключения видимости меню
local function toggleMenu()
    menuEnabled = not menuEnabled
    mainFrame.Visible = menuEnabled
end

-- Обработчик клика по кружочку
toggleButton.MouseButton1Click:Connect(function()
    if not wasDragging then
        toggleMenu()
    end
    wasDragging = false
end)

-- Бинд на LControl
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then
        return
    end

    if input.KeyCode == Enum.KeyCode.LeftControl then
        toggleMenu()
    end
end)

-- Универсальная функция загрузки
local function safeLoad(url, name)
    if cachedFunctions[name] then
        return cachedFunctions[name]
    end

    local success, result = pcall(function()
        return loadstring(game:HttpGet(url, true))()
    end)

    if success then
        cachedFunctions[name] = result
        return result
    else
        warn('Failed to load', name, ':', result)
        return nil
    end
end

-- Anti-Effects functionality
local antiEffectsCleanup = nil

local function loadAntiEffects()
    return safeLoad(
        'https://raw.githubusercontent.com/leshk19029/sphirit/refs/heads/main/anti-effects',
        'AntiEffects'
    )
end

local function startAntiEffects()
    local func = loadAntiEffects()
    if func and type(func) == 'function' then
        local success, result = pcall(func)
        if success then
            antiEffectsCleanup = result
            functionStates.AntiEffects = true
            return true
        else
            warn('AntiEffects execution failed:', result)
            return false
        end
    else
        return false
    end
end

local function stopAntiEffects()
    if antiEffectsCleanup and type(antiEffectsCleanup) == 'function' then
        pcall(antiEffectsCleanup)
        antiEffectsCleanup = nil
    end
    functionStates.AntiEffects = false
end

-- Auto-Steal functionality
local autoStealCleanup = nil

local function loadAutoSteal()
    return safeLoad(
        'https://raw.githubusercontent.com/leshk19029/sphirit/refs/heads/main/auto-steal',
        'AutoSteal'
    )
end

local function startAutoSteal()
    if autoStealCleanup and type(autoStealCleanup) == 'function' then
        pcall(autoStealCleanup)
        autoStealCleanup = nil
    end

    local func = loadAutoSteal()
    if func and type(func) == 'function' then
        local success, cleanupFunc = pcall(func)
        if success and type(cleanupFunc) == 'function' then
            autoStealCleanup = cleanupFunc
            functionStates.AutoSteal = true
            return true
        end
    end

    return false
end

local function stopAutoSteal()
    if autoStealCleanup and type(autoStealCleanup) == 'function' then
        pcall(autoStealCleanup)
        autoStealCleanup = nil
    end

    local playerGui = player:FindFirstChild('PlayerGui')
    if playerGui then
        local autoStealGui = playerGui:FindFirstChild('ForestSpiritControl')
        if autoStealGui then
            autoStealGui:Destroy()
        end
    end

    functionStates.AutoSteal = false
end

-- ESP functionality
local ESPModule = nil

local function loadESP()
    return safeLoad(
        'https://raw.githubusercontent.com/leshk19029/sphirit/refs/heads/main/esp',
        'ESP'
    )
end

local function startESP()
    if functionStates.ESP then
        return true
    end

    local espModule = loadESP()
    if espModule and type(espModule) == 'table' then
        ESPModule = espModule
        if ESPModule.ToggleAll and type(ESPModule.ToggleAll) == 'function' then
            local success = pcall(function()
                ESPModule.ToggleAll(true)
            end)

            if success then
                functionStates.ESP = true
                return true
            else
                stopESP()
                return false
            end
        end
    end
    return false
end

local function stopESP()
    if not functionStates.ESP then
        return true
    end

    if ESPModule then
        if ESPModule.ToggleAll and type(ESPModule.ToggleAll) == 'function' then
            pcall(function()
                ESPModule.ToggleAll(false)
            end)
        end
        if ESPModule.Unload and type(ESPModule.Unload) == 'function' then
            pcall(function()
                ESPModule.Unload()
            end)
        end
        ESPModule = nil
    end

    pcall(function()
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA('Highlight') or obj.Name:find('ESP') then
                obj:Destroy()
            end
        end
    end)

    functionStates.ESP = false
    return true
end

-- Control-Player functionality
local controlPlayerCleanup = nil

local function loadControlPlayer()
    return safeLoad(
        'https://raw.githubusercontent.com/leshk19029/sphirit/refs/heads/main/control-player',
        'ControlPlayer'
    )
end

local function startControlPlayer()
    if functionStates.ControlPlayer then
        return true
    end

    local func = loadControlPlayer()
    if func and type(func) == 'function' then
        local success, cleanupFunc = pcall(func)
        if success and type(cleanupFunc) == 'function' then
            controlPlayerCleanup = cleanupFunc
            functionStates.ControlPlayer = true
            return true
        elseif success then
            functionStates.ControlPlayer = true
            return true
        else
            warn('ControlPlayer execution failed:', cleanupFunc)
            return false
        end
    end
    return false
end

local function stopControlPlayer()
    if controlPlayerCleanup and type(controlPlayerCleanup) == 'function' then
        pcall(controlPlayerCleanup)
        controlPlayerCleanup = nil
    end
    
    functionStates.ControlPlayer = false
    
    pcall(function()
        -- Дополнительная очистка, если нужно
    end)
    
    return true
end

-- Anti-Effects toggle button
local antiEffectsToggle = Instance.new('TextButton')
antiEffectsToggle.Size = UDim2.new(1, 0, 0, 40)
antiEffectsToggle.Position = UDim2.new(0, 0, 0, 0)
antiEffectsToggle.BackgroundColor3 = mainColor
antiEffectsToggle.BorderSizePixel = 0
antiEffectsToggle.Text = 'ANTI-EFFECTS'
antiEffectsToggle.TextColor3 = textColor
antiEffectsToggle.Font = Enum.Font.SciFi
antiEffectsToggle.TextSize = 20
antiEffectsToggle.Parent = contentFrame

local antiEffectsToggleCorner = Instance.new('UICorner')
antiEffectsToggleCorner.CornerRadius = UDim.new(0, 6)
antiEffectsToggleCorner.Parent = antiEffectsToggle

local antiEffectsToggleStroke = Instance.new('UIStroke')
antiEffectsToggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
antiEffectsToggleStroke.Color = borderColor
antiEffectsToggleStroke.Thickness = 1.5
antiEffectsToggleStroke.LineJoinMode = Enum.LineJoinMode.Round
antiEffectsToggleStroke.Parent = antiEffectsToggle

antiEffectsToggle.MouseButton1Click:Connect(function()
    if functionStates.AntiEffects then
        stopAntiEffects()
        antiEffectsToggle.TextColor3 = textColor
        antiEffectsToggleStroke.Color = borderColor
    else
        antiEffectsToggle.TextColor3 = Color3.fromRGB(255, 255, 100)
        antiEffectsToggleStroke.Color = Color3.fromRGB(255, 255, 100)

        if startAntiEffects() then
            antiEffectsToggle.TextColor3 = accentColor
            antiEffectsToggleStroke.Color = accentColor
        else
            antiEffectsToggle.TextColor3 = Color3.fromRGB(255, 50, 50)
            antiEffectsToggleStroke.Color = Color3.fromRGB(255, 50, 50)

            task.delay(2, function()
                if not functionStates.AntiEffects then
                    antiEffectsToggle.TextColor3 = textColor
                    antiEffectsToggleStroke.Color = borderColor
                end
            end)
        end
    end
end)

-- Auto-Steal toggle button
local autoStealToggle = Instance.new('TextButton')
autoStealToggle.Size = UDim2.new(1, 0, 0, 40)
autoStealToggle.Position = UDim2.new(0, 0, 0, 50)
autoStealToggle.BackgroundColor3 = mainColor
autoStealToggle.BorderSizePixel = 0
autoStealToggle.Text = 'AUTO-STEAL'
autoStealToggle.TextColor3 = textColor
autoStealToggle.Font = Enum.Font.SciFi
autoStealToggle.TextSize = 20
autoStealToggle.Parent = contentFrame

local autoStealToggleCorner = Instance.new('UICorner')
autoStealToggleCorner.CornerRadius = UDim.new(0, 6)
autoStealToggleCorner.Parent = autoStealToggle

local autoStealToggleStroke = Instance.new('UIStroke')
autoStealToggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
autoStealToggleStroke.Color = borderColor
autoStealToggleStroke.Thickness = 1.5
autoStealToggleStroke.LineJoinMode = Enum.LineJoinMode.Round
autoStealToggleStroke.Parent = autoStealToggle

autoStealToggle.MouseButton1Click:Connect(function()
    if functionStates.AutoSteal then
        stopAutoSteal()
        autoStealToggle.TextColor3 = textColor
        autoStealToggleStroke.Color = borderColor
    else
        autoStealToggle.TextColor3 = Color3.fromRGB(255, 255, 100)
        autoStealToggleStroke.Color = Color3.fromRGB(255, 255, 100)

        if startAutoSteal() then
            autoStealToggle.TextColor3 = accentColor
            autoStealToggleStroke.Color = accentColor
        else
            autoStealToggle.TextColor3 = Color3.fromRGB(255, 50, 50)
            autoStealToggleStroke.Color = Color3.fromRGB(255, 50, 50)

            task.delay(2, function()
                if not functionStates.AutoSteal then
                    autoStealToggle.TextColor3 = textColor
                    autoStealToggleStroke.Color = borderColor
                end
            end)
        end
    end
end)

-- ESP toggle button
local espToggle = Instance.new('TextButton')
espToggle.Size = UDim2.new(1, 0, 0, 40)
espToggle.Position = UDim2.new(0, 0, 0, 100)
espToggle.BackgroundColor3 = mainColor
espToggle.BorderSizePixel = 0
espToggle.Text = 'ESP'
espToggle.TextColor3 = textColor
espToggle.Font = Enum.Font.SciFi
espToggle.TextSize = 20
espToggle.Parent = contentFrame

local espToggleCorner = Instance.new('UICorner')
espToggleCorner.CornerRadius = UDim.new(0, 6)
espToggleCorner.Parent = espToggle

local espToggleStroke = Instance.new('UIStroke')
espToggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
espToggleStroke.Color = borderColor
espToggleStroke.Thickness = 1.5
espToggleStroke.LineJoinMode = Enum.LineJoinMode.Round
espToggleStroke.Parent = espToggle

espToggle.MouseButton1Click:Connect(function()
    if functionStates.ESP then
        if stopESP() then
            espToggle.TextColor3 = textColor
            espToggleStroke.Color = borderColor
        else
            espToggle.TextColor3 = Color3.fromRGB(255, 50, 50)
            espToggleStroke.Color = Color3.fromRGB(255, 50, 50)
        end
    else
        espToggle.TextColor3 = Color3.fromRGB(255, 255, 100)
        espToggleStroke.Color = Color3.fromRGB(255, 255, 100)

        if startESP() then
            espToggle.TextColor3 = accentColor
            espToggleStroke.Color = accentColor
        else
            espToggle.TextColor3 = Color3.fromRGB(255, 50, 50)
            espToggleStroke.Color = Color3.fromRGB(255, 50, 50)

            task.delay(2, function()
                if not functionStates.ESP then
                    espToggle.TextColor3 = textColor
                    espToggleStroke.Color = borderColor
                end
            end)
        end
    end
end)

-- Control-Player toggle button
local controlPlayerToggle = Instance.new('TextButton')
controlPlayerToggle.Size = UDim2.new(1, 0, 0, 40)
controlPlayerToggle.Position = UDim2.new(0, 0, 0, 150)
controlPlayerToggle.BackgroundColor3 = mainColor
controlPlayerToggle.BorderSizePixel = 0
controlPlayerToggle.Text = 'CONTROL-PLAYER'
controlPlayerToggle.TextColor3 = textColor
controlPlayerToggle.Font = Enum.Font.SciFi
controlPlayerToggle.TextSize = 20
controlPlayerToggle.Parent = contentFrame

local controlPlayerToggleCorner = Instance.new('UICorner')
controlPlayerToggleCorner.CornerRadius = UDim.new(0, 6)
controlPlayerToggleCorner.Parent = controlPlayerToggle

local controlPlayerToggleStroke = Instance.new('UIStroke')
controlPlayerToggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
controlPlayerToggleStroke.Color = borderColor
controlPlayerToggleStroke.Thickness = 1.5
controlPlayerToggleStroke.LineJoinMode = Enum.LineJoinMode.Round
controlPlayerToggleStroke.Parent = controlPlayerToggle

controlPlayerToggle.MouseButton1Click:Connect(function()
    if functionStates.ControlPlayer then
        if stopControlPlayer() then
            controlPlayerToggle.TextColor3 = textColor
            controlPlayerToggleStroke.Color = borderColor
        else
            controlPlayerToggle.TextColor3 = Color3.fromRGB(255, 50, 50)
            controlPlayerToggleStroke.Color = Color3.fromRGB(255, 50, 50)
        end
    else
        controlPlayerToggle.TextColor3 = Color3.fromRGB(255, 255, 100)
        controlPlayerToggleStroke.Color = Color3.fromRGB(255, 255, 100)

        if startControlPlayer() then
            controlPlayerToggle.TextColor3 = accentColor
            controlPlayerToggleStroke.Color = accentColor
        else
            controlPlayerToggle.TextColor3 = Color3.fromRGB(255, 50, 50)
            controlPlayerToggleStroke.Color = Color3.fromRGB(255, 50, 50)

            task.delay(2, function()
                if not functionStates.ControlPlayer then
                    controlPlayerToggle.TextColor3 = textColor
                    controlPlayerToggleStroke.Color = borderColor
                end
            end)
        end
    end
end)

-- Управление видимостью главного меню
mainFrame.Visible = false

-- Функция для восстановления состояний после смерти
local function restoreFunctions()
    if functionStates.AntiEffects then
        startAntiEffects()
    end

    if functionStates.AutoSteal then
        startAutoSteal()
    end

    if functionStates.ESP then
        startESP()
    end

    if functionStates.ControlPlayer then
        startControlPlayer()
    end
end

-- Восстановление функций после смерти
local function onCharacterAdded(character)
    task.wait(1)
    restoreFunctions()
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Обновляем цвета кнопок при запуске
task.spawn(function()
    task.wait(0.5)

    if functionStates.AntiEffects then
        antiEffectsToggle.TextColor3 = accentColor
        antiEffectsToggleStroke.Color = accentColor
    else
        antiEffectsToggle.TextColor3 = textColor
        antiEffectsToggleStroke.Color = borderColor
    end

    if functionStates.AutoSteal then
        autoStealToggle.TextColor3 = accentColor
        autoStealToggleStroke.Color = accentColor
    else
        autoStealToggle.TextColor3 = textColor
        autoStealToggleStroke.Color = borderColor
    end

    if functionStates.ESP then
        espToggle.TextColor3 = accentColor
        espToggleStroke.Color = accentColor
    else
        espToggle.TextColor3 = textColor
        espToggleStroke.Color = borderColor
    end

    if functionStates.ControlPlayer then
        controlPlayerToggle.TextColor3 = accentColor
        controlPlayerToggleStroke.Color = accentColor
    else
        controlPlayerToggle.TextColor3 = textColor
        controlPlayerToggleStroke.Color = borderColor
    end
end)

-- Очистка при удалении GUI
screenGui.Destroying:Connect(function()
    stopAntiEffects()
    stopAutoSteal()
    stopESP()
    stopControlPlayer()
end)

-- Предзагрузка функций в фоновом режиме
task.spawn(function()
    loadAntiEffects()
    loadAutoSteal()
    loadESP()
    loadControlPlayer()
end)

-- Автоматическое обновление цветов кнопок
task.spawn(function()
    while true do
        task.wait(0.1)

        -- Обновляем цвет кнопок на основе состояний из functionStates
        if functionStates.AntiEffects and antiEffectsToggle.TextColor3 ~= accentColor then
            antiEffectsToggle.TextColor3 = accentColor
            antiEffectsToggleStroke.Color = accentColor
        elseif not functionStates.AntiEffects and antiEffectsToggle.TextColor3 == accentColor then
            antiEffectsToggle.TextColor3 = textColor
            antiEffectsToggleStroke.Color = borderColor
        end

        if functionStates.AutoSteal and autoStealToggle.TextColor3 ~= accentColor then
            autoStealToggle.TextColor3 = accentColor
            autoStealToggleStroke.Color = accentColor
        elseif not functionStates.AutoSteal and autoStealToggle.TextColor3 == accentColor then
            autoStealToggle.TextColor3 = textColor
            autoStealToggleStroke.Color = borderColor
        end

        if functionStates.ESP and espToggle.TextColor3 ~= accentColor then
            espToggle.TextColor3 = accentColor
            espToggleStroke.Color = accentColor
        elseif not functionStates.ESP and espToggle.TextColor3 == accentColor then
            espToggle.TextColor3 = textColor
            espToggleStroke.Color = borderColor
        end

        if functionStates.ControlPlayer and controlPlayerToggle.TextColor3 ~= accentColor then
            controlPlayerToggle.TextColor3 = accentColor
            controlPlayerToggleStroke.Color = accentColor
        elseif not functionStates.ControlPlayer and controlPlayerToggle.TextColor3 == accentColor then
            controlPlayerToggle.TextColor3 = textColor
            controlPlayerToggleStroke.Color = borderColor
        end
    end
end)
