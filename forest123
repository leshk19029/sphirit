local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ProximityPromptService = game:GetService("ProximityPromptService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local Event = ReplicatedStorage.Packages.Net["RE/UseItem"]
local Plot = Workspace.Plots

local isActive = false
local isMoving = false
local promptTriggered = false
local promptConnection = nil
local armCheckConnection = nil
local flightEnabled = false
local currentSpeed = 500
local movementConnection = nil
local autoTaserEnabled = false
local taserMonitorConnection = nil

local processedPrompts = {}
local promptHoldTimes = {}
local hasInteracted = false

-- Сначала объявляем все переменные UI
local screenGui, mainFrame, statusLabel, taserBtn, actionBtn, timerLabel

-- Функция обновления статуса (должна быть объявлена перед использованием)
local function updateStatus(text)
    if statusLabel then
        statusLabel.Text = text
    end
end

-- Функции авто-стейла с Laser Cape
local function LaserCapeHit()
    if player.Character then
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            Event:FireServer(humanoidRootPart)
            updateStatus("Laser Cape использован!")
        end
    end
end

local function LaserCapeTake()
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then
        return false
    end
    
    -- Ищем Laser Cape
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and (tool.Name:lower():find("cape") or tool.Name:lower():find("laser")) then
            -- Дополнительная проверка для точного определения Laser Cape
            if tool.Name:lower():find("laser") and tool.Name:lower():find("cape") then
                local character = player.Character
                if character then
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid:EquipTool(tool)
                        updateStatus("Laser Cape экипирован")
                        return true
                    end
                end
            end
        end
    end
    
    -- Если не нашли точное совпадение, пробуем найти любой подходящий инструмент
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and (tool.Name:lower():find("cape") or tool.Name:lower():find("laser")) then
            local character = player.Character
            if character then
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid:EquipTool(tool)
                    updateStatus("Экипирован: " .. tool.Name)
                    return true
                end
            end
        end
    end
    
    return false
end

local function ParseTimeToSeconds(timeText)
    if not timeText then return 0 end
    if timeText == "UNLOCKED" or timeText == "0s" or timeText == "" then return 0 end
    
    local totalSeconds = 0
    local minutes = timeText:match("(%d+)m")
    if minutes then totalSeconds = totalSeconds + tonumber(minutes) * 60 end
    
    local seconds = timeText:match("(%d+)s")
    if seconds then totalSeconds = totalSeconds + tonumber(seconds) end
    
    if totalSeconds == 0 then
        local anyNumber = timeText:match("(%d+)")
        if anyNumber then totalSeconds = tonumber(anyNumber) end
    end
    
    return totalSeconds
end

local function FindNearestTimerToPlayer()
    local Plots = workspace:FindFirstChild("Plots")
    if not Plots or not hrp then return nil end
    
    local nearestTimer = nil
    local minDistance = math.huge
    local playerPosition = hrp.Position
    
    for _, plot in pairs(Plots:GetChildren()) do
        local Purchases = plot:FindFirstChild("Purchases")
        if Purchases then
            local Plotblock = Purchases:FindFirstChild("PlotBlock")
            if Plotblock then
                local main = Plotblock:FindFirstChild("Main")
                if main then
                    local billboardgui = main:FindFirstChild("BillboardGui")
                    if billboardgui then
                        local remainingTime = billboardgui:FindFirstChild("RemainingTime")
                        if remainingTime and remainingTime:IsA("TextLabel") then
                            local plotPosition = main.Position
                            local distance = (playerPosition - plotPosition).Magnitude
                            
                            if distance < minDistance then
                                minDistance = distance
                                nearestTimer = {
                                    Plot = plot,
                                    RemainingTime = remainingTime,
                                    TimeSeconds = ParseTimeToSeconds(remainingTime.Text),
                                    TimeText = remainingTime.Text,
                                    Distance = distance
                                }
                            end
                        end
                    end
                end
            end
        end
    end
    
    return nearestTimer
end

local function FindStealPromptInPlot(plot)
    if not plot then return nil end
    
    local prompts = plot:GetDescendants()
    for _, prompt in pairs(prompts) do
        if prompt:IsA("ProximityPrompt") and prompt.ActionText == "Grab" then
            return prompt
        end
    end
    
    return nil
end

local function InteractWithStealPrompt(prompt)
    if prompt then
        promptHoldTimes[prompt] = os.clock()
        
        fireproximityprompt(prompt, 1)
        updateStatus("Взаимодействие с промптом...")
        
        local holdCheckConnection
        holdCheckConnection = RunService.Heartbeat:Connect(function()
            if promptHoldTimes[prompt] then
                local holdTime = os.clock() - promptHoldTimes[prompt]
                -- Laser Cape берется через 1.1 секунды и используется через 1.45
                if holdTime >= 1.1 and holdTime < 1.25 then
                    LaserCapeTake()
                end
                if holdTime >= 1.45 then
                    LaserCapeHit()
                    promptHoldTimes[prompt] = nil
                    if holdCheckConnection then
                        holdCheckConnection:Disconnect()
                    end
                end
            else
                if holdCheckConnection then
                    holdCheckConnection:Disconnect()
                end
            end
        end)
        
        task.wait(0.5)
        fireproximityprompt(prompt, 0)
        task.wait(0.1)
        
        promptHoldTimes[prompt] = nil
        return true
    end
    return false
end

local function MonitorAutoTaser()
    while autoTaserEnabled and task.wait(0.1) do
        local nearest = FindNearestTimerToPlayer()
        
        if nearest then
            updateStatus("Найден таймер: " .. nearest.TimeText)
            
            -- Сбрасываем флаг взаимодействия если таймер обновился
            if nearest.TimeSeconds > 1.7 then
                hasInteracted = false
            end
            
            if not hasInteracted and nearest.TimeSeconds <= 1.7 and nearest.TimeSeconds > 0 then
                local stealPrompt = FindStealPromptInPlot(nearest.Plot)
                if stealPrompt then
                    updateStatus("Авто-стейл! Осталось: " .. nearest.TimeText)
                    InteractWithStealPrompt(stealPrompt)
                    hasInteracted = true
                end
            end
        else
            updateStatus("Таймеры не найдены")
        end
    end
end

local function toggleAutoTaser()
    autoTaserEnabled = not autoTaserEnabled
    
    if autoTaserEnabled then
        taserBtn.Text = "AutoSteal: ON"
        taserBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
        updateStatus("Авто-стейл включен")
        
        -- Запускаем мониторинг
        hasInteracted = false
        spawn(MonitorAutoTaser)
    else
        taserBtn.Text = "AutoSteal: OFF"
        taserBtn.BackgroundColor3 = Color3.fromRGB(60, 70, 80)
        updateStatus("Авто-стейл выключен")
    end
end

local function useItemOnSelf()
    if not character then
        return
    end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return
    end
    
    -- Сначала пытаемся взять Laser Cape, потом использовать
    if LaserCapeTake() then
        task.wait(0.1)
        LaserCapeHit()
    else
        Event:FireServer(humanoidRootPart)
    end
end
local function connectPrompt(prompt)
    if processedPrompts[prompt] then return end
    
    prompt.Triggered:Connect(useItemOnSelf)
    processedPrompts[prompt] = true
end

local function setupPlotPrompts(plot)
    local AnimalPodiums = plot:FindFirstChild("AnimalPodiums")
    if not AnimalPodiums then return end
    
    for _, podium in pairs(AnimalPodiums:GetChildren()) do
        local base = podium:FindFirstChild("Base")
        if not base then continue end
        
        local spawn = base:FindFirstChild("Spawn")
        if not spawn then continue end
        
        local attachment = spawn:FindFirstChild("PromtAttachment") or spawn:FindFirstChild("PromptAttachment")
        if not attachment then continue end
        
        local prompt = attachment:FindFirstChild("ProximityPrompt") or attachment:FindFirstChild("ProximityPromt")
        if prompt and prompt:IsA("ProximityPrompt") then
            connectPrompt(prompt)
        end
    end
end

local function setupExistingPlots()
    for _, plot in pairs(Plot:GetChildren()) do
        setupPlotPrompts(plot)
    end
end

local function monitorNewPlots()
    Plot.ChildAdded:Connect(function(newPlot)
        wait(0.5)
        setupPlotPrompts(newPlot)
    end)
end

local function periodicPlotCheck()
    while true do
        wait(0.1)
        setupExistingPlots()
    end
end

-- Функции полета
local flightVelocity = nil
local flightAttachment = nil
local flightConnection = nil

local function setupFlight()
    if hrp:FindFirstChild("FlightAttachment") then
        hrp.FlightAttachment:Destroy()
    end
    if hrp:FindFirstChildOfClass("LinearVelocity") then
        hrp:FindFirstChildOfClass("LinearVelocity"):Destroy()
    end

    flightAttachment = Instance.new("Attachment")
    flightAttachment.Name = "FlightAttachment"
    flightAttachment.Parent = hrp

    flightVelocity = Instance.new("LinearVelocity")
    flightVelocity.Attachment0 = flightAttachment
    flightVelocity.RelativeTo = Enum.ActuatorRelativeTo.World
    flightVelocity.MaxForce = math.huge
    flightVelocity.Name = "FlightVelocity"
    flightVelocity.Parent = hrp
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = true
    end
    
    return flightVelocity, flightAttachment
end

local function cleanupFlight()
    if flightVelocity then
        flightVelocity.VectorVelocity = Vector3.zero
        flightVelocity:Destroy()
        flightVelocity = nil
    end
    
    if flightAttachment then
        flightAttachment:Destroy()
        flightAttachment = nil
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = false
    end
    
    if flightConnection then
        flightConnection:Disconnect()
        flightConnection = nil
    end
end

local function toggleFlight()
    flightEnabled = not flightEnabled
    if flightEnabled then
        setupFlight()

        flightConnection = RunService.Heartbeat:Connect(function()
            if not flightEnabled or not flightVelocity then return end

            local myPlotSign = nil
            for _, plot in ipairs(Workspace:WaitForChild("Plots"):GetChildren()) do
                local sign = plot:FindFirstChild("PlotSign")
                if sign then
                    local yourBase = sign:FindFirstChild("YourBase")
                    if yourBase and yourBase.Enabled then
                        myPlotSign = sign
                        break
                    end
                end
            end

            if not myPlotSign or not hrp then
                flightVelocity.VectorVelocity = Vector3.zero
                return
            end

            local targetPos = myPlotSign.Position
            local currentPos = hrp.Position
            local direction = (targetPos - currentPos)
            local distance = direction.Magnitude

            if distance <= 30 then
                flightVelocity.VectorVelocity = Vector3.zero
                updateStatus("Остановка за 30 студов до базы")

                task.delay(1.5, function()
                    if flightEnabled then
                        toggleFlight()
                    end
                end)

                return
            end

            if distance <= 135 then
                local slowdownFactor = math.clamp(distance / 135, 0.1, 1)
                local finalSpeed = currentSpeed * slowdownFactor
                direction = direction.Unit
                flightVelocity.VectorVelocity = direction * finalSpeed
                updateStatus(string.format("Замедление: осталось %.1f студов", distance))
            else
                direction = direction.Unit
                flightVelocity.VectorVelocity = direction * currentSpeed
                updateStatus(string.format("Полет к базе: %.1f студов", distance))
            end
        end)
    else
        cleanupFlight()
        updateStatus("Полет отключен")
    end
end

-- Функции навигации
local function checkArmRotation()
    if not character then return false end
    local leftArm = character:FindFirstChild("LeftUpperArm")
    if not leftArm then return false end
    
    return math.deg(leftArm.Orientation.X) > 60
end

local function handlePromptTriggered(prompt)
    if isActive and not promptTriggered then
        promptTriggered = true
        updateStatus("Промпт активирован, начинаю движение...")
    end
end

local function getLaserCenter(model)
    if not model:IsA("Model") then return nil end
    local primary = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
    if not primary then return nil end
    return primary.Position
end

local function isSizeClose(partSize, targetSize, tolerance)
    return math.abs(partSize.X - targetSize.X) <= tolerance
        and math.abs(partSize.Y - targetSize.Y) <= tolerance
        and math.abs(partSize.Z - targetSize.Z) <= tolerance
end

local function getTargetForFloor(level, fromThirdFloor)
    local closestTarget, closestDistance = nil, math.huge

    for _, plot in ipairs(Workspace:WaitForChild("Plots"):GetChildren()) do
        if level == 1 then
            local laserFolder = plot:FindFirstChild("Laser")
            if laserFolder then
                for _, laser in ipairs(laserFolder:GetChildren()) do
                    if laser:IsA("Model") then
                        local pos = getLaserCenter(laser)
                        if pos and pos.Y <= 8 then
                            local dist = (pos - hrp.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestTarget = laser
                            end
                        end
                    end
                end
            end
        elseif level == 2 then
            if not fromThirdFloor then
                local modelFolder = plot:FindFirstChild("Model")
                local foundInitialTarget = false
                if modelFolder then
                    for _, obj in ipairs(modelFolder:GetChildren()) do
                        if obj:IsA("BasePart") and isSizeClose(obj.Size, Vector3.new(5, 1, 1), 0.01) then
                            local dist = (obj.Position - hrp.Position).Magnitude
                            if dist < 5 then
                                if dist < closestDistance then
                                    closestDistance = dist
                                    closestTarget = obj
                                    foundInitialTarget = true
                                end
                            end
                        end
                    end
                end
                if not foundInitialTarget then
                    local decorations = plot:FindFirstChild("Decorations")
                    if decorations then
                        for _, obj in ipairs(decorations:GetChildren()) do
                            if obj:IsA("BasePart") and isSizeClose(obj.Size, Vector3.new(45, 45, 2), 0.01) then
                                local posY = obj.Position.Y
                                if posY >= 8 and posY <= 9.1 then
                                    local dist = (obj.Position - hrp.Position).Magnitude
                                    if dist < closestDistance then
                                        closestDistance = dist
                                        closestTarget = obj
                                    end
                                end
                            end
                        end
                    end
                end
            else
                local decorations = plot:FindFirstChild("Decorations")
                if decorations then
                    for _, obj in ipairs(decorations:GetChildren()) do
                        if obj:IsA("BasePart") and isSizeClose(obj.Size, Vector3.new(17, 10, 2), 0.01) then
                            local dist = (obj.Position - hrp.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestTarget = obj
                            end
                        end
                    end
                end
            end
        elseif level == 3 then
            local laserHitboxFolder = plot:FindFirstChild("LaserHitbox")
            if laserHitboxFolder then
                local thirdFloorPart = laserHitboxFolder:FindFirstChild("ThirdFloor")
                if thirdFloorPart then
                    local dist = (thirdFloorPart.Position - hrp.Position).Magnitude
                    if dist < closestDistance then
                        closestDistance = dist
                        closestTarget = thirdFloorPart
                    end
                end
            end
        end
    end
    
    return closestTarget
end

local function getTargetPosition(target)
    if target:IsA("Model") then
        return getLaserCenter(target)
    elseif target:IsA("BasePart") then
        local pos = target.Position
        if isSizeClose(target.Size, Vector3.new(17, 10, 2), 0.01) then
            local zOffset = hrp.Position.X > -410 and 5 or -5
            pos = pos + Vector3.new(0, 0, zOffset)
        end
        return pos
    else
        return nil
    end
end

local function moveToXPositionWithStop(targetX)
    local speed = 600
    local tolerance = 0.5
    local stopDistance = 15

    local myPlotSign = nil
    for _, plot in ipairs(Workspace:WaitForChild("Plots"):GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                myPlotSign = sign
                break
            end
        end
    end

    updateStatus("Движение к X = " .. targetX)

    local lv, attachment = setupFlight()

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = true
    end

    local targetY = hrp.Position.Y
    local targetZ = hrp.Position.Z
    
    movementConnection = RunService.Heartbeat:Connect(function()
        if not isMoving then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            attachment:Destroy()

            if humanoid then
                humanoid.PlatformStand = false
            end

            if movementConnection then
                movementConnection:Disconnect()
                movementConnection = nil
            end
            updateStatus("Движение отменено")
            return
        end

        local currentPos = hrp.Position
        local currentX = currentPos.X
        local distanceToTarget = math.abs(currentX - targetX)

        local distanceToPlotSign = math.huge
        if myPlotSign then
            distanceToPlotSign = (currentPos - myPlotSign.Position).Magnitude
        end

        if distanceToPlotSign <= stopDistance then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            attachment:Destroy()

            if humanoid then
                humanoid.PlatformStand = false
            end

            if movementConnection then
                movementConnection:Disconnect()
                movementConnection = nil
            end
            updateStatus("Остановка перед базой (" .. math.floor(distanceToPlotSign) .. " студов)")
            isMoving = false
            actionBtn.Text = "🚀 START"
            actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)

            task.wait(2)

            if not flightEnabled then
                toggleFlight()
                updateStatus("Автополет к базе")
            end

            return
        end

        if math.abs(currentX - (-410)) <= tolerance then
            lv.VectorVelocity = Vector3.zero
            lv:Destroy()
            attachment:Destroy()

            if humanoid then
                humanoid.PlatformStand = false
            end

            if movementConnection then
                movementConnection:Disconnect()
                movementConnection = nil
            end
            updateStatus("Достигнута позиция X = -410")
            
            updateStatus("МГНОВЕННЫЙ СПУСК!")
            hrp.CFrame = CFrame.new(hrp.Position.X, 5, hrp.Position.Z)
            
            isMoving = false
            actionBtn.Text = "🚀 START"
            actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
            updateStatus("Спуск завершен!")
            
            if not flightEnabled then
                toggleFlight()
                updateStatus("Автополет к базе")
            end

            return
        end

        local direction = (currentX > targetX) and -1 or 1

        local finalSpeed = speed
        if myPlotSign and distanceToPlotSign < 50 then
            local slowdownFactor = math.clamp(distanceToPlotSign / 50, 0.3, 1)
            finalSpeed = speed * slowdownFactor
        end

        if distanceToTarget < 30 then
            local slowdownFactor = math.clamp(distanceToTarget / 30, 0.2, 1)
            finalSpeed = speed * slowdownFactor
        end

        local velocity = Vector3.new(direction * finalSpeed, 0, 0)
        
        local heightDifference = targetY - currentPos.Y
        if math.abs(heightDifference) > 0.1 then
            velocity = velocity + Vector3.new(0, heightDifference * 5, 0)
        end
        
        local zDifference = targetZ - currentPos.Z
        if math.abs(zDifference) > 0.1 then
            velocity = velocity + Vector3.new(0, 0, zDifference * 5)
        end

        lv.VectorVelocity = velocity
        updateStatus(string.format("Движение к X = %d (осталось: %.1f, до базы: %.1f)",
            targetX, distanceToTarget, distanceToPlotSign))
    end)
end

local function moveToTarget(target, level, fromThirdFloor)
    local pos = getTargetPosition(target)
    if not pos then
        updateStatus("Ошибка: неверная позиция")
        isMoving = false
        actionBtn.Text = "🚀 START"
        actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
        return
    end

    local tolerance = 0.5
    updateStatus("Движение к позиции")
    
    if level == 3 then
        cleanupFlight()
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
        
        local speed = 250
        movementConnection = RunService.Heartbeat:Connect(function()
            if not isMoving or not hrp or not hrp.Parent then
                if movementConnection then
                    movementConnection:Disconnect()
                    movementConnection = nil
                end
                return
            end

            if (hrp.Position - pos).Magnitude < 1 then
                if movementConnection then
                    movementConnection:Disconnect()
                    movementConnection = nil
                end
                
                updateStatus("Позиция достигнута, мгновенный спуск")
                
                hrp.CFrame = CFrame.new(hrp.Position.X, hrp.Position.Y - 15, hrp.Position.Z)
                
                updateStatus("Спуск завершен, поиск позиции 2 этажа")
                
                local newTarget = getTargetForFloor(2, true)
                if newTarget then
                    moveToTarget(newTarget, 2, true)
                else
                    updateStatus("Позиция не найдена")
                    isMoving = false
                    actionBtn.Text = "🚀 START"
                    actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
                end
            else
                local dir = (pos - hrp.Position)
                if dir.Magnitude > 0 then
                    dir = dir.Unit
                    hrp.Velocity = Vector3.new(dir.X * speed, hrp.Velocity.Y, dir.Z * speed)
                else
                    hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
                end
            end
        end)
    else
        cleanupFlight()
        
        local lv, attachment = setupFlight()
        local speed = 250
        
        movementConnection = RunService.Heartbeat:Connect(function()
            if not isMoving then
                cleanupFlight()
                if movementConnection then
                    movementConnection:Disconnect()
                    movementConnection = nil
                end
                return
            end

            local reached = false
            if level == 1 or (level == 2 and fromThirdFloor) then
                local charPos = hrp.Position
                local dx = math.abs(charPos.X - pos.X)
                local dz = math.abs(charPos.Z - pos.Z)
                reached = dx < tolerance and dz < tolerance
            elseif level == 2 then
                reached = (hrp.Position - pos).Magnitude < 6
            end

            if reached then
                cleanupFlight()
                if movementConnection then
                    movementConnection:Disconnect()
                    movementConnection = nil
                end
                
                if level == 2 and not fromThirdFloor then
                    local mainTarget = getTargetForFloor(2, true)
                    if mainTarget then
                        updateStatus("Основная позиция найдена")
                        moveToTarget(mainTarget, 2, true)
                    else
                        updateStatus("Позиция не найдена")
                        isMoving = false
                        actionBtn.Text = "🚀 START"
                        actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
                    end
                else
                    moveToXPositionWithStop(-410)
                end
            else
                local dir = (pos - hrp.Position)
                if dir.Magnitude > 0 then
                    dir = dir.Unit
                    lv.VectorVelocity = Vector3.new(dir.X * speed, 0, dir.Z * speed)
                else
                    lv.VectorVelocity = Vector3.zero
                end
            end
        end)
    end
end

local function cancelEverything()
    isActive = false
    isMoving = false
    promptTriggered = false
    
    if promptConnection then
        promptConnection:Disconnect()
        promptConnection = nil
    end
    
    if armCheckConnection then
        armCheckConnection:Disconnect()
        armCheckConnection = nil
    end
    
    if movementConnection then
        movementConnection:Disconnect()
        movementConnection = nil
    end
    
    cleanupFlight()
    
    actionBtn.Text = "🚀 START"
    actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
    updateStatus("Все процессы отменены")
end

local function startProcess()
    if isMoving then
        cancelEverything()
        return
    end

    isActive = true
    promptTriggered = false
    actionBtn.Text = "⏹️ Отмена"
    actionBtn.BackgroundColor3 = Color3.fromRGB(200, 80, 80)
    updateStatus("Ожидание промпта... Нажмите кнопку для отмены")

    promptConnection = ProximityPromptService.PromptTriggered:Connect(handlePromptTriggered)

    armCheckConnection = RunService.Heartbeat:Connect(function()
        if not isActive then
            armCheckConnection:Disconnect()
            return
        end

        if promptTriggered and checkArmRotation() then
            isMoving = true
            isActive = false
            actionBtn.Text = "⏹️ Stop"
            actionBtn.BackgroundColor3 = Color3.fromRGB(200, 80, 80)
            
            if promptConnection then
                promptConnection:Disconnect()
                promptConnection = nil
            end
            
            if armCheckConnection then
                armCheckConnection:Disconnect()
                armCheckConnection = nil
            end

            updateStatus("Запуск процесса")
            local currentY = hrp.Position.Y
            local level = currentY <= 8 and 1 or (currentY <= 24 and 2 or 3)
            updateStatus("Текущий этаж: " .. level)
            local target = getTargetForFloor(level, false)
            if target then
                updateStatus("Позиция найдена на этаже " .. level)
                moveToTarget(target, level, false)
            else
                updateStatus("Позиция не найдена")
                isMoving = false
                actionBtn.Text = "🚀 START"
                actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
            end
        end
    end)
end

-- Функция обновления таймера
local function updateTimerDisplay()
    if not autoTaserEnabled then
        timerLabel.Text = "Time: --"
        return
    end
    
    local nearest = FindNearestTimerToPlayer()
    if nearest and nearest.TimeText then
        timerLabel.Text = "Time: " .. nearest.TimeText
    else
        timerLabel.Text = "Time: --"
    end
end

-- Создание интерфейса
local function createUI()
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ForestSpiritControl"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 292, 0, 180)
    mainFrame.Position = UDim2.new(0.5, -625, 0.3, 0)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 35, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 10)
    uiCorner.Parent = mainFrame

    local mainShadow = Instance.new("UIStroke")
    mainShadow.Thickness = 2
    mainShadow.Color = Color3.fromRGB(60, 70, 80)
    mainShadow.Parent = mainFrame

    local headerFrame = Instance.new("Frame")
    headerFrame.Size = UDim2.new(1, 0, 0, 33)
    headerFrame.BackgroundColor3 = Color3.fromRGB(40, 45, 50)
    headerFrame.BorderSizePixel = 0
    headerFrame.Parent = mainFrame

    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 10)
    headerCorner.Parent = headerFrame

    local headerLabel = Instance.new("TextLabel")
    headerLabel.Size = UDim2.new(1, 0, 1, 0)
    headerLabel.BackgroundTransparency = 1
    headerLabel.Text = "🌲 ЛЕШИЙ v1"
    headerLabel.TextColor3 = Color3.fromRGB(170, 255, 170)
    headerLabel.TextSize = 15
    headerLabel.Font = Enum.Font.GothamBold
    headerLabel.Parent = headerFrame

    local headerGradient = Instance.new("UIGradient")
    headerGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 200, 120)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(60, 160, 100))
    }
    headerGradient.Rotation = 90
    headerGradient.Parent = headerFrame

    local statusPanel = Instance.new("Frame")
    statusPanel.Size = UDim2.new(1, -17, 0, 50)
    statusPanel.Position = UDim2.new(0, 8, 0, 42)
    statusPanel.BackgroundColor3 = Color3.fromRGB(40, 45, 50)
    statusPanel.BorderSizePixel = 0
    statusPanel.Parent = mainFrame

    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(0, 7)
    statusCorner.Parent = statusPanel

    statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -8, 1, -8)
    statusLabel.Position = UDim2.new(0, 4, 0, 4)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Нажми START для начала"
    statusLabel.TextColor3 = Color3.fromRGB(200, 230, 200)
    statusLabel.TextSize = 16
    statusLabel.Font = Enum.Font.GothamBold
    statusLabel.TextWrapped = true
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = statusPanel

    -- Панель таймера
    local timerPanel = Instance.new("Frame")
    timerPanel.Size = UDim2.new(0.4, -5, 0, 25)
    timerPanel.Position = UDim2.new(0, 8, 0, 100)
    timerPanel.BackgroundColor3 = Color3.fromRGB(40, 45, 50)
    timerPanel.BorderSizePixel = 0
    timerPanel.Parent = mainFrame

    local timerCorner = Instance.new("UICorner")
    timerCorner.CornerRadius = UDim.new(0, 5)
    timerCorner.Parent = timerPanel

    timerLabel = Instance.new("TextLabel")
    timerLabel.Size = UDim2.new(1, -8, 1, -8)
    timerLabel.Position = UDim2.new(0, 4, 0, 4)
    timerLabel.BackgroundTransparency = 1
    timerLabel.Text = "Time: --"
    timerLabel.TextColor3 = Color3.fromRGB(200, 230, 200)
    timerLabel.TextSize = 12
    timerLabel.Font = Enum.Font.Gotham
    timerLabel.TextXAlignment = Enum.TextXAlignment.Left
    timerLabel.Parent = timerPanel

    -- Кнопка авто-стейла
    taserBtn = Instance.new("TextButton")
    taserBtn.Size = UDim2.new(0.4, -5, 0, 25)
    taserBtn.Position = UDim2.new(0.6, 0, 0, 100)
    taserBtn.BackgroundColor3 = Color3.fromRGB(60, 70, 80)
    taserBtn.Text = "AutoSteal: OFF"
    taserBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
    taserBtn.TextSize = 12
    taserBtn.Font = Enum.Font.Gotham
    taserBtn.Parent = mainFrame

    local taserCorner = Instance.new("UICorner")
    taserCorner.CornerRadius = UDim.new(0, 5)
    taserCorner.Parent = taserBtn

    local buttonsFrame = Instance.new("Frame")
    buttonsFrame.Size = UDim2.new(1, -17, 0, 42)
    buttonsFrame.Position = UDim2.new(0, 8, 0, 130)
    buttonsFrame.BackgroundTransparency = 1
    buttonsFrame.Parent = mainFrame

    actionBtn = Instance.new("TextButton")
    actionBtn.Size = UDim2.new(1, 0, 1, 0)
    actionBtn.BackgroundColor3 = Color3.fromRGB(80, 160, 100)
    actionBtn.Text = "🚀 START"
    actionBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    actionBtn.TextSize = 18
    actionBtn.Font = Enum.Font.GothamBold
    actionBtn.Parent = buttonsFrame

    local actionCorner = Instance.new("UICorner")
    actionCorner.CornerRadius = UDim.new(0, 7)
    actionCorner.Parent = actionBtn

    local btnGradient = Instance.new("UIGradient")
    btnGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 200, 120)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 160, 100))
    }
    btnGradient.Rotation = 45
    btnGradient.Parent = actionBtn

    -- Перетаскивание окна
    local dragging = false
    local dragStart = nil
    local startPos = nil

    headerFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)

    headerFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- Обработчики кликов
    taserBtn.MouseButton1Click:Connect(toggleAutoTaser)

    actionBtn.MouseButton1Click:Connect(function()
        if isActive or isMoving then
            cancelEverything()
        else
            startProcess()
        end
    end)
end

-- Инициализация
createUI()
setupExistingPlots()
monitorNewPlots()
spawn(periodicPlotCheck)

-- Обновление таймера
spawn(function()
    while true do
        updateTimerDisplay()
        task.wait(0.3)
    end
end)

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    hrp = newCharacter:WaitForChild("HumanoidRootPart")
    updateStatus("Готов к работе")
    
    if flightEnabled then
        toggleFlight()
    end
end)

updateStatus("Готов к работе")
