local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer

-- Переменные состояния
local isActive = false
local currentPlot = nil
local currentConnections = {}
local isFloating = false
local floatConnection = nil
local scriptActive = true
local flightEnabled = false
local originalProperties = {}
local originalAnchoredState = false

-- Создаем интерфейс
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FlightControl"
screenGui.Parent = CoreGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 250, 0, 120)
frame.Position = UDim2.new(0.5, -125, 0.1, 0)
frame.AnchorPoint = Vector2.new(0.5, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BackgroundTransparency = 0.3
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 8)
uiCorner.Parent = frame

local title = Instance.new("TextLabel")
title.Text = "ПОЛЕТ К SPAWN"
title.Size = UDim2.new(1, 0, 0, 25)
title.Position = UDim2.new(0, 0, 0, 5)
title.BackgroundTransparency = 1
title.TextColor3 = Color3.fromRGB(200, 200, 200)
title.Font = Enum.Font.GothamBold
title.TextSize = 14
title.TextXAlignment = Enum.TextXAlignment.Center

local flightToggle = Instance.new("TextButton")
flightToggle.Size = UDim2.new(0, 80, 0, 25)
flightToggle.Position = UDim2.new(0.1, 0, 0.3, 0)
flightToggle.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
flightToggle.Text = "ВЫКЛ"
flightToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
flightToggle.Font = Enum.Font.GothamBold
flightToggle.TextSize = 12

local statusLabel = Instance.new("TextLabel")
statusLabel.Text = "Статус: Ожидание"
statusLabel.Size = UDim2.new(0.9, 0, 0, 20)
statusLabel.Position = UDim2.new(0.05, 0, 0.6, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 12
statusLabel.TextXAlignment = Enum.TextXAlignment.Left

local closeLabel = Instance.new("TextLabel")
closeLabel.Text = "F2 - выключить | Down - отмена"
closeLabel.Size = UDim2.new(0.9, 0, 0, 15)
closeLabel.Position = UDim2.new(0.05, 0, 0.8, 0)
closeLabel.BackgroundTransparency = 1
closeLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
closeLabel.Font = Enum.Font.Gotham
closeLabel.TextSize = 10
closeLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Иерархия объектов
title.Parent = frame
flightToggle.Parent = frame
statusLabel.Parent = frame
closeLabel.Parent = frame
uiCorner.Parent = frame
frame.Parent = screenGui

-- Функции для работы с прозрачностью и CanCollide
local function setPlotTransparency(transparencyValue)
    if not currentPlot then return false end
    
    originalProperties = {}
    
    local function processObject(obj)
        if obj:IsA("BasePart") then
            originalProperties[obj] = {
                Transparency = obj.Transparency,
                CanCollide = obj.CanCollide
            }
            
            obj.CanCollide = false
            
            if obj.Name == "FakeRootPart" or obj.Name == "VfxInstance" then
                obj.Transparency = 1
            elseif obj.Name == "Hitbox" and obj.Parent and obj.Parent.Name == "Claim" then
                obj.Transparency = 1
            elseif obj.Name == "Spawn" then
                -- Не изменяем прозрачность Spawn
            else
                obj.Transparency = transparencyValue
            end
        end
    end
    
    local function recurse(model)
        for _, child in ipairs(model:GetChildren()) do
            if child:IsA("Model") or child:IsA("Folder") then
                recurse(child)
            else
                processObject(child)
            end
        end
    end
    
    recurse(currentPlot)
    return true
end

local function restorePlotTransparency()
    if not currentPlot then return false end
    
    for obj, properties in pairs(originalProperties) do
        if obj and obj.Parent then
            obj.Transparency = properties.Transparency
            obj.CanCollide = properties.CanCollide
        end
    end
    
    originalProperties = {}
    return true
end

-- Основные функции
local function findNearestPlot()
    local plots = workspace.Plots:GetChildren()
    local character = player.Character
    if not character or not character.PrimaryPart then return nil end
    
    local playerPosition = character.PrimaryPart.Position
    local nearestPlot = nil
    local shortestDistance = math.huge
    
    for _, plot in ipairs(plots) do
        if plot:IsA("Model") and plot.PrimaryPart then
            local distance = (playerPosition - plot.PrimaryPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlot = plot
            end
        end
    end
    
    return nearestPlot
end

local function findNearestSpawn()
    if not currentPlot then return nil end
    
    local animalPodiums = currentPlot:FindFirstChild("AnimalPodiums")
    if not animalPodiums then return nil end
    
    local character = player.Character
    if not character or not character.PrimaryPart then return nil end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return nil end
    
    local rootPart = humanoid.RootPart
    if not rootPart then return nil end
    
    local playerPosition = rootPart.Position
    local nearestSpawn = nil
    local shortestDistance = math.huge
    
    local zCoordinatePairs = {
        {197.60662841796875, 243.60662841796875},
        {-123.39336395263672, -77.3933695263672},
        {136.60687255859375, 90.6064122314453},
        {-13.39263153076172, -77.39263153076172},
        {197.60736083984375, 243.6076083984375},
        {-163.39336395263672, 29.60736846923828},
        {90.60736846923828, 136.6073608398437},
        {29.60663604736328, -16.39336395263672}
    }
    
    local playerHeight = rootPart.Position.Y
    local skipLowPodiums = playerHeight > 11
    
    for i = 11, 20 do
        if skipLowPodiums and i <= 18 then
            continue
        end
        
        local podium = animalPodiums:FindFirstChild(tostring(i))
        if podium then
            local base = podium:FindFirstChild("Base")
            if base then
                local spawn = base:FindFirstChild("Spawn")
                if spawn then
                    local spawnZ = spawn.Position.Z
                    
                    -- Находим пару координат для этого спавна
                    local targetPair = nil
                    for _, pair in ipairs(zCoordinatePairs) do
                        local dist1 = math.abs(spawnZ - pair[1])
                        local dist2 = math.abs(spawnZ - pair[2])
                        
                        if dist1 < 10 or dist2 < 10 then
                            targetPair = pair
                            break
                        end
                    end
                    
                    if targetPair then
                        -- Проверяем обе координаты из пары и выбираем ближайшую
                        local targetZ1 = targetPair[1]
                        local targetZ2 = targetPair[2]
                        
                        local distanceToZ1 = math.abs(playerPosition.Z - targetZ1)
                        local distanceToZ2 = math.abs(playerPosition.Z - targetZ2)
                        
                        -- Выбираем ближайшую Z-координату
                        local finalTargetZ = distanceToZ1 < distanceToZ2 and targetZ1 or targetZ2
                        
                        local targetPosition = Vector3.new(
                            spawn.Position.X,
                            spawn.Position.Y - 3,
                            finalTargetZ
                        )
                        
                        local distance = (playerPosition - targetPosition).Magnitude
                        if distance < shortestDistance then
                            shortestDistance = distance
                            nearestSpawn = targetPosition
                        end
                    else
                        -- Если не нашли подходящую пару, используем оригинальную Z спавна
                        local targetPosition = Vector3.new(
                            spawn.Position.X,
                            spawn.Position.Y - 3,
                            spawn.Position.Z
                        )
                        
                        local distance = (playerPosition - targetPosition).Magnitude
                        if distance < shortestDistance then
                            shortestDistance = distance
                            nearestSpawn = targetPosition
                        end
                    end
                end
            end
        end
    end
    
    return nearestSpawn
end

local function smoothFlyToTarget(targetPosition)
    local character = player.Character
    if not character or not character.PrimaryPart then return false end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return false end
    
    -- Сохраняем исходное состояние Anchored
    originalAnchoredState = character.PrimaryPart.Anchored
    
    -- НЕ включаем PlatformStand - чтобы анимации работали
    isFloating = true
    
    local startPosition = character.PrimaryPart.Position
    local startTime = tick()
    local duration = 1.5 -- Уменьшил время полета
    
    statusLabel.Text = "Статус: Полёт..."
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not character or not character.PrimaryPart or not isFloating then
            connection:Disconnect()
            return
        end
        
        local elapsed = tick() - startTime
        local alpha = math.min(elapsed / duration, 1)
        
        local currentPosition = character.PrimaryPart.Position
        local distanceToTarget = (targetPosition - currentPosition).Magnitude
        
        -- Если достигли цели, устанавливаем Anchored
        if distanceToTarget <= 2 then
            connection:Disconnect()
            statusLabel.Text = "Статус: Зафиксирован (Down - отмена)"
            
            -- Устанавливаем Anchored только когда прилетели
            character.PrimaryPart.Anchored = true
            character.PrimaryPart.Velocity = Vector3.new(0, 0, 0)
            character.PrimaryPart.RotVelocity = Vector3.new(0, 0, 0)
            
            return
        end
        
        -- Вычисляем направление к цели
        local direction = (targetPosition - currentPosition).Unit
        
        -- Более агрессивное движение - летим прямо к цели
        local speed = math.min(distanceToTarget * 1, 100) -- Увеличил скорость
        
        -- Применяем Velocity прямо к цели
        character.PrimaryPart.Velocity = direction * speed
        
        -- Небольшая корректировка для точности приземления
        if distanceToTarget < 10 then
            -- Замедляемся при приближении к цели
            character.PrimaryPart.Velocity = direction * (distanceToTarget * 2)
        end
        
        if alpha >= 1 then
            connection:Disconnect()
            statusLabel.Text = "Статус: Зафиксирован (Down - отмена)"
            
            -- Устанавливаем Anchored только когда прилетели
            character.PrimaryPart.Anchored = true
            character.PrimaryPart.Velocity = Vector3.new(0, 0, 0)
            character.PrimaryPart.RotVelocity = Vector3.new(0, 0, 0)
        end
    end)
    
    table.insert(currentConnections, connection)
    return true
end

local function deactivateFlightMode()
    isFloating = false
    
    -- Восстанавливаем прозрачность и CanCollide для plot
    restorePlotTransparency()
    
    local character = player.Character
    if character and character.PrimaryPart then
        -- Восстанавливаем исходное состояние Anchored
        character.PrimaryPart.Anchored = originalAnchoredState
        
        -- Сбрасываем Velocity для нормального падения
        if not character.PrimaryPart.Anchored then
            character.PrimaryPart.Velocity = Vector3.new(0, -10, 0)
        end
        character.PrimaryPart.RotVelocity = Vector3.new(0, 0, 0)
    end
    
    for _, connection in ipairs(currentConnections) do
        pcall(function() connection:Disconnect() end)
    end
    currentConnections = {}
    
    isActive = false
    currentPlot = nil
    statusLabel.Text = "Статус: Ожидание"
    return true
end

local function activateFlightToSpawn()
    if not flightEnabled then return false end
    
    currentPlot = findNearestPlot()
    if not currentPlot then
        statusLabel.Text = "Статус: Plot не найден"
        return false
    end
    
    -- Устанавливаем прозрачность и отключаем CanCollide для plot
    setPlotTransparency(0.5)
    
    local nearestSpawn = findNearestSpawn()
    if nearestSpawn then
        statusLabel.Text = "Статус: Летим к ближайшей Z..."
        smoothFlyToTarget(nearestSpawn)
    else
        statusLabel.Text = "Статус: Spawn не найден"
        restorePlotTransparency()
        return false
    end
    
    isActive = true
    return true
end

local function disableScript()
    scriptActive = false
    flightEnabled = false
    deactivateFlightMode()
    screenGui:Destroy()
end

-- Обработчики клавиш
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.F2 then
        disableScript()
    elseif input.KeyCode == Enum.KeyCode.Down and scriptActive and flightEnabled then
        if isActive then deactivateFlightMode() end
    end
end)

-- Переключатель полета
flightToggle.MouseButton1Click:Connect(function()
    flightEnabled = not flightEnabled
    if flightEnabled then
        flightToggle.Text = "ВКЛ"
        flightToggle.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        statusLabel.Text = "Статус: Активация..."
        
        wait(0.1)
        if not isActive then
            activateFlightToSpawn()
        end
    else
        flightToggle.Text = "ВЫКЛ"
        flightToggle.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
        deactivateFlightMode()
    end
end)
